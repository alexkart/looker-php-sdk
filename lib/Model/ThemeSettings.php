<?php
/**
 * ThemeSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ThemeSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ThemeSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ThemeSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'background_color' => 'string',
        'base_font_size' => 'string',
        'color_collection_id' => 'string',
        'font_color' => 'string',
        'font_family' => 'string',
        'font_source' => 'string',
        'info_button_color' => 'string',
        'primary_button_color' => 'string',
        'show_filters_bar' => 'bool',
        'show_title' => 'bool',
        'text_tile_text_color' => 'string',
        'tile_background_color' => 'string',
        'text_tile_background_color' => 'string',
        'tile_text_color' => 'string',
        'title_color' => 'string',
        'warn_button_color' => 'string',
        'tile_title_alignment' => 'string',
        'tile_shadow' => 'bool',
        'show_last_updated_indicator' => 'bool',
        'show_reload_data_icon' => 'bool',
        'show_dashboard_menu' => 'bool',
        'show_filters_toggle' => 'bool',
        'show_dashboard_header' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'background_color' => null,
        'base_font_size' => null,
        'color_collection_id' => null,
        'font_color' => null,
        'font_family' => null,
        'font_source' => null,
        'info_button_color' => null,
        'primary_button_color' => null,
        'show_filters_bar' => null,
        'show_title' => null,
        'text_tile_text_color' => null,
        'tile_background_color' => null,
        'text_tile_background_color' => null,
        'tile_text_color' => null,
        'title_color' => null,
        'warn_button_color' => null,
        'tile_title_alignment' => null,
        'tile_shadow' => null,
        'show_last_updated_indicator' => null,
        'show_reload_data_icon' => null,
        'show_dashboard_menu' => null,
        'show_filters_toggle' => null,
        'show_dashboard_header' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'background_color' => 'background_color',
        'base_font_size' => 'base_font_size',
        'color_collection_id' => 'color_collection_id',
        'font_color' => 'font_color',
        'font_family' => 'font_family',
        'font_source' => 'font_source',
        'info_button_color' => 'info_button_color',
        'primary_button_color' => 'primary_button_color',
        'show_filters_bar' => 'show_filters_bar',
        'show_title' => 'show_title',
        'text_tile_text_color' => 'text_tile_text_color',
        'tile_background_color' => 'tile_background_color',
        'text_tile_background_color' => 'text_tile_background_color',
        'tile_text_color' => 'tile_text_color',
        'title_color' => 'title_color',
        'warn_button_color' => 'warn_button_color',
        'tile_title_alignment' => 'tile_title_alignment',
        'tile_shadow' => 'tile_shadow',
        'show_last_updated_indicator' => 'show_last_updated_indicator',
        'show_reload_data_icon' => 'show_reload_data_icon',
        'show_dashboard_menu' => 'show_dashboard_menu',
        'show_filters_toggle' => 'show_filters_toggle',
        'show_dashboard_header' => 'show_dashboard_header'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'background_color' => 'setBackgroundColor',
        'base_font_size' => 'setBaseFontSize',
        'color_collection_id' => 'setColorCollectionId',
        'font_color' => 'setFontColor',
        'font_family' => 'setFontFamily',
        'font_source' => 'setFontSource',
        'info_button_color' => 'setInfoButtonColor',
        'primary_button_color' => 'setPrimaryButtonColor',
        'show_filters_bar' => 'setShowFiltersBar',
        'show_title' => 'setShowTitle',
        'text_tile_text_color' => 'setTextTileTextColor',
        'tile_background_color' => 'setTileBackgroundColor',
        'text_tile_background_color' => 'setTextTileBackgroundColor',
        'tile_text_color' => 'setTileTextColor',
        'title_color' => 'setTitleColor',
        'warn_button_color' => 'setWarnButtonColor',
        'tile_title_alignment' => 'setTileTitleAlignment',
        'tile_shadow' => 'setTileShadow',
        'show_last_updated_indicator' => 'setShowLastUpdatedIndicator',
        'show_reload_data_icon' => 'setShowReloadDataIcon',
        'show_dashboard_menu' => 'setShowDashboardMenu',
        'show_filters_toggle' => 'setShowFiltersToggle',
        'show_dashboard_header' => 'setShowDashboardHeader'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'background_color' => 'getBackgroundColor',
        'base_font_size' => 'getBaseFontSize',
        'color_collection_id' => 'getColorCollectionId',
        'font_color' => 'getFontColor',
        'font_family' => 'getFontFamily',
        'font_source' => 'getFontSource',
        'info_button_color' => 'getInfoButtonColor',
        'primary_button_color' => 'getPrimaryButtonColor',
        'show_filters_bar' => 'getShowFiltersBar',
        'show_title' => 'getShowTitle',
        'text_tile_text_color' => 'getTextTileTextColor',
        'tile_background_color' => 'getTileBackgroundColor',
        'text_tile_background_color' => 'getTextTileBackgroundColor',
        'tile_text_color' => 'getTileTextColor',
        'title_color' => 'getTitleColor',
        'warn_button_color' => 'getWarnButtonColor',
        'tile_title_alignment' => 'getTileTitleAlignment',
        'tile_shadow' => 'getTileShadow',
        'show_last_updated_indicator' => 'getShowLastUpdatedIndicator',
        'show_reload_data_icon' => 'getShowReloadDataIcon',
        'show_dashboard_menu' => 'getShowDashboardMenu',
        'show_filters_toggle' => 'getShowFiltersToggle',
        'show_dashboard_header' => 'getShowDashboardHeader'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['background_color'] = isset($data['background_color']) ? $data['background_color'] : null;
        $this->container['base_font_size'] = isset($data['base_font_size']) ? $data['base_font_size'] : null;
        $this->container['color_collection_id'] = isset($data['color_collection_id']) ? $data['color_collection_id'] : null;
        $this->container['font_color'] = isset($data['font_color']) ? $data['font_color'] : null;
        $this->container['font_family'] = isset($data['font_family']) ? $data['font_family'] : null;
        $this->container['font_source'] = isset($data['font_source']) ? $data['font_source'] : null;
        $this->container['info_button_color'] = isset($data['info_button_color']) ? $data['info_button_color'] : null;
        $this->container['primary_button_color'] = isset($data['primary_button_color']) ? $data['primary_button_color'] : null;
        $this->container['show_filters_bar'] = isset($data['show_filters_bar']) ? $data['show_filters_bar'] : null;
        $this->container['show_title'] = isset($data['show_title']) ? $data['show_title'] : null;
        $this->container['text_tile_text_color'] = isset($data['text_tile_text_color']) ? $data['text_tile_text_color'] : null;
        $this->container['tile_background_color'] = isset($data['tile_background_color']) ? $data['tile_background_color'] : null;
        $this->container['text_tile_background_color'] = isset($data['text_tile_background_color']) ? $data['text_tile_background_color'] : null;
        $this->container['tile_text_color'] = isset($data['tile_text_color']) ? $data['tile_text_color'] : null;
        $this->container['title_color'] = isset($data['title_color']) ? $data['title_color'] : null;
        $this->container['warn_button_color'] = isset($data['warn_button_color']) ? $data['warn_button_color'] : null;
        $this->container['tile_title_alignment'] = isset($data['tile_title_alignment']) ? $data['tile_title_alignment'] : null;
        $this->container['tile_shadow'] = isset($data['tile_shadow']) ? $data['tile_shadow'] : null;
        $this->container['show_last_updated_indicator'] = isset($data['show_last_updated_indicator']) ? $data['show_last_updated_indicator'] : null;
        $this->container['show_reload_data_icon'] = isset($data['show_reload_data_icon']) ? $data['show_reload_data_icon'] : null;
        $this->container['show_dashboard_menu'] = isset($data['show_dashboard_menu']) ? $data['show_dashboard_menu'] : null;
        $this->container['show_filters_toggle'] = isset($data['show_filters_toggle']) ? $data['show_filters_toggle'] : null;
        $this->container['show_dashboard_header'] = isset($data['show_dashboard_header']) ? $data['show_dashboard_header'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets background_color
     *
     * @return string
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string $background_color Default background color
     *
     * @return $this
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets base_font_size
     *
     * @return string
     */
    public function getBaseFontSize()
    {
        return $this->container['base_font_size'];
    }

    /**
     * Sets base_font_size
     *
     * @param string $base_font_size Base font size for scaling fonts (only supported by legacy dashboards)
     *
     * @return $this
     */
    public function setBaseFontSize($base_font_size)
    {
        $this->container['base_font_size'] = $base_font_size;

        return $this;
    }

    /**
     * Gets color_collection_id
     *
     * @return string
     */
    public function getColorCollectionId()
    {
        return $this->container['color_collection_id'];
    }

    /**
     * Sets color_collection_id
     *
     * @param string $color_collection_id Optional. ID of color collection to use with the theme. Use an empty string for none.
     *
     * @return $this
     */
    public function setColorCollectionId($color_collection_id)
    {
        $this->container['color_collection_id'] = $color_collection_id;

        return $this;
    }

    /**
     * Gets font_color
     *
     * @return string
     */
    public function getFontColor()
    {
        return $this->container['font_color'];
    }

    /**
     * Sets font_color
     *
     * @param string $font_color Default font color
     *
     * @return $this
     */
    public function setFontColor($font_color)
    {
        $this->container['font_color'] = $font_color;

        return $this;
    }

    /**
     * Gets font_family
     *
     * @return string
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     *
     * @param string $font_family Primary font family
     *
     * @return $this
     */
    public function setFontFamily($font_family)
    {
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets font_source
     *
     * @return string
     */
    public function getFontSource()
    {
        return $this->container['font_source'];
    }

    /**
     * Sets font_source
     *
     * @param string $font_source Source specification for font
     *
     * @return $this
     */
    public function setFontSource($font_source)
    {
        $this->container['font_source'] = $font_source;

        return $this;
    }

    /**
     * Gets info_button_color
     *
     * @return string
     */
    public function getInfoButtonColor()
    {
        return $this->container['info_button_color'];
    }

    /**
     * Sets info_button_color
     *
     * @param string $info_button_color Info button color
     *
     * @return $this
     */
    public function setInfoButtonColor($info_button_color)
    {
        $this->container['info_button_color'] = $info_button_color;

        return $this;
    }

    /**
     * Gets primary_button_color
     *
     * @return string
     */
    public function getPrimaryButtonColor()
    {
        return $this->container['primary_button_color'];
    }

    /**
     * Sets primary_button_color
     *
     * @param string $primary_button_color Primary button color
     *
     * @return $this
     */
    public function setPrimaryButtonColor($primary_button_color)
    {
        $this->container['primary_button_color'] = $primary_button_color;

        return $this;
    }

    /**
     * Gets show_filters_bar
     *
     * @return bool
     */
    public function getShowFiltersBar()
    {
        return $this->container['show_filters_bar'];
    }

    /**
     * Sets show_filters_bar
     *
     * @param bool $show_filters_bar Toggle to show filters. Defaults to true.
     *
     * @return $this
     */
    public function setShowFiltersBar($show_filters_bar)
    {
        $this->container['show_filters_bar'] = $show_filters_bar;

        return $this;
    }

    /**
     * Gets show_title
     *
     * @return bool
     */
    public function getShowTitle()
    {
        return $this->container['show_title'];
    }

    /**
     * Sets show_title
     *
     * @param bool $show_title Toggle to show the title. Defaults to true.
     *
     * @return $this
     */
    public function setShowTitle($show_title)
    {
        $this->container['show_title'] = $show_title;

        return $this;
    }

    /**
     * Gets text_tile_text_color
     *
     * @return string
     */
    public function getTextTileTextColor()
    {
        return $this->container['text_tile_text_color'];
    }

    /**
     * Sets text_tile_text_color
     *
     * @param string $text_tile_text_color Text color for text tiles
     *
     * @return $this
     */
    public function setTextTileTextColor($text_tile_text_color)
    {
        $this->container['text_tile_text_color'] = $text_tile_text_color;

        return $this;
    }

    /**
     * Gets tile_background_color
     *
     * @return string
     */
    public function getTileBackgroundColor()
    {
        return $this->container['tile_background_color'];
    }

    /**
     * Sets tile_background_color
     *
     * @param string $tile_background_color Background color for tiles
     *
     * @return $this
     */
    public function setTileBackgroundColor($tile_background_color)
    {
        $this->container['tile_background_color'] = $tile_background_color;

        return $this;
    }

    /**
     * Gets text_tile_background_color
     *
     * @return string
     */
    public function getTextTileBackgroundColor()
    {
        return $this->container['text_tile_background_color'];
    }

    /**
     * Sets text_tile_background_color
     *
     * @param string $text_tile_background_color Background color for text tiles
     *
     * @return $this
     */
    public function setTextTileBackgroundColor($text_tile_background_color)
    {
        $this->container['text_tile_background_color'] = $text_tile_background_color;

        return $this;
    }

    /**
     * Gets tile_text_color
     *
     * @return string
     */
    public function getTileTextColor()
    {
        return $this->container['tile_text_color'];
    }

    /**
     * Sets tile_text_color
     *
     * @param string $tile_text_color Text color for tiles
     *
     * @return $this
     */
    public function setTileTextColor($tile_text_color)
    {
        $this->container['tile_text_color'] = $tile_text_color;

        return $this;
    }

    /**
     * Gets title_color
     *
     * @return string
     */
    public function getTitleColor()
    {
        return $this->container['title_color'];
    }

    /**
     * Sets title_color
     *
     * @param string $title_color Color for titles
     *
     * @return $this
     */
    public function setTitleColor($title_color)
    {
        $this->container['title_color'] = $title_color;

        return $this;
    }

    /**
     * Gets warn_button_color
     *
     * @return string
     */
    public function getWarnButtonColor()
    {
        return $this->container['warn_button_color'];
    }

    /**
     * Sets warn_button_color
     *
     * @param string $warn_button_color Warning button color
     *
     * @return $this
     */
    public function setWarnButtonColor($warn_button_color)
    {
        $this->container['warn_button_color'] = $warn_button_color;

        return $this;
    }

    /**
     * Gets tile_title_alignment
     *
     * @return string
     */
    public function getTileTitleAlignment()
    {
        return $this->container['tile_title_alignment'];
    }

    /**
     * Sets tile_title_alignment
     *
     * @param string $tile_title_alignment The text alignment of tile titles (New Dashboards)
     *
     * @return $this
     */
    public function setTileTitleAlignment($tile_title_alignment)
    {
        $this->container['tile_title_alignment'] = $tile_title_alignment;

        return $this;
    }

    /**
     * Gets tile_shadow
     *
     * @return bool
     */
    public function getTileShadow()
    {
        return $this->container['tile_shadow'];
    }

    /**
     * Sets tile_shadow
     *
     * @param bool $tile_shadow Toggles the tile shadow (not supported)
     *
     * @return $this
     */
    public function setTileShadow($tile_shadow)
    {
        $this->container['tile_shadow'] = $tile_shadow;

        return $this;
    }

    /**
     * Gets show_last_updated_indicator
     *
     * @return bool
     */
    public function getShowLastUpdatedIndicator()
    {
        return $this->container['show_last_updated_indicator'];
    }

    /**
     * Sets show_last_updated_indicator
     *
     * @param bool $show_last_updated_indicator Toggle to show the dashboard last updated indicator. Defaults to true.
     *
     * @return $this
     */
    public function setShowLastUpdatedIndicator($show_last_updated_indicator)
    {
        $this->container['show_last_updated_indicator'] = $show_last_updated_indicator;

        return $this;
    }

    /**
     * Gets show_reload_data_icon
     *
     * @return bool
     */
    public function getShowReloadDataIcon()
    {
        return $this->container['show_reload_data_icon'];
    }

    /**
     * Sets show_reload_data_icon
     *
     * @param bool $show_reload_data_icon Toggle to show reload data icon/button. Defaults to true.
     *
     * @return $this
     */
    public function setShowReloadDataIcon($show_reload_data_icon)
    {
        $this->container['show_reload_data_icon'] = $show_reload_data_icon;

        return $this;
    }

    /**
     * Gets show_dashboard_menu
     *
     * @return bool
     */
    public function getShowDashboardMenu()
    {
        return $this->container['show_dashboard_menu'];
    }

    /**
     * Sets show_dashboard_menu
     *
     * @param bool $show_dashboard_menu Toggle to show the dashboard actions menu. Defaults to true.
     *
     * @return $this
     */
    public function setShowDashboardMenu($show_dashboard_menu)
    {
        $this->container['show_dashboard_menu'] = $show_dashboard_menu;

        return $this;
    }

    /**
     * Gets show_filters_toggle
     *
     * @return bool
     */
    public function getShowFiltersToggle()
    {
        return $this->container['show_filters_toggle'];
    }

    /**
     * Sets show_filters_toggle
     *
     * @param bool $show_filters_toggle Toggle to show the filters icon/toggle. Defaults to true.
     *
     * @return $this
     */
    public function setShowFiltersToggle($show_filters_toggle)
    {
        $this->container['show_filters_toggle'] = $show_filters_toggle;

        return $this;
    }

    /**
     * Gets show_dashboard_header
     *
     * @return bool
     */
    public function getShowDashboardHeader()
    {
        return $this->container['show_dashboard_header'];
    }

    /**
     * Sets show_dashboard_header
     *
     * @param bool $show_dashboard_header Toggle to show the dashboard header. Defaults to true.
     *
     * @return $this
     */
    public function setShowDashboardHeader($show_dashboard_header)
    {
        $this->container['show_dashboard_header'] = $show_dashboard_header;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


