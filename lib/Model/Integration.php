<?php
/**
 * Integration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Integration Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Integration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Integration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can' => 'map[string,bool]',
        'id' => 'string',
        'integration_hub_id' => 'string',
        'label' => 'string',
        'description' => 'string',
        'enabled' => 'bool',
        'params' => '\Swagger\Client\Model\IntegrationParam[]',
        'supported_formats' => 'string[]',
        'supported_action_types' => 'string[]',
        'supported_formattings' => 'string[]',
        'supported_visualization_formattings' => 'string[]',
        'supported_download_settings' => 'string[]',
        'icon_url' => 'string',
        'uses_oauth' => 'bool',
        'required_fields' => '\Swagger\Client\Model\IntegrationRequiredField[]',
        'privacy_link' => 'string',
        'delegate_oauth' => 'bool',
        'installed_delegate_oauth_targets' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'can' => null,
        'id' => null,
        'integration_hub_id' => null,
        'label' => null,
        'description' => null,
        'enabled' => null,
        'params' => null,
        'supported_formats' => null,
        'supported_action_types' => null,
        'supported_formattings' => null,
        'supported_visualization_formattings' => null,
        'supported_download_settings' => null,
        'icon_url' => null,
        'uses_oauth' => null,
        'required_fields' => null,
        'privacy_link' => null,
        'delegate_oauth' => null,
        'installed_delegate_oauth_targets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'id' => 'id',
        'integration_hub_id' => 'integration_hub_id',
        'label' => 'label',
        'description' => 'description',
        'enabled' => 'enabled',
        'params' => 'params',
        'supported_formats' => 'supported_formats',
        'supported_action_types' => 'supported_action_types',
        'supported_formattings' => 'supported_formattings',
        'supported_visualization_formattings' => 'supported_visualization_formattings',
        'supported_download_settings' => 'supported_download_settings',
        'icon_url' => 'icon_url',
        'uses_oauth' => 'uses_oauth',
        'required_fields' => 'required_fields',
        'privacy_link' => 'privacy_link',
        'delegate_oauth' => 'delegate_oauth',
        'installed_delegate_oauth_targets' => 'installed_delegate_oauth_targets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'id' => 'setId',
        'integration_hub_id' => 'setIntegrationHubId',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'params' => 'setParams',
        'supported_formats' => 'setSupportedFormats',
        'supported_action_types' => 'setSupportedActionTypes',
        'supported_formattings' => 'setSupportedFormattings',
        'supported_visualization_formattings' => 'setSupportedVisualizationFormattings',
        'supported_download_settings' => 'setSupportedDownloadSettings',
        'icon_url' => 'setIconUrl',
        'uses_oauth' => 'setUsesOauth',
        'required_fields' => 'setRequiredFields',
        'privacy_link' => 'setPrivacyLink',
        'delegate_oauth' => 'setDelegateOauth',
        'installed_delegate_oauth_targets' => 'setInstalledDelegateOauthTargets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'id' => 'getId',
        'integration_hub_id' => 'getIntegrationHubId',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'params' => 'getParams',
        'supported_formats' => 'getSupportedFormats',
        'supported_action_types' => 'getSupportedActionTypes',
        'supported_formattings' => 'getSupportedFormattings',
        'supported_visualization_formattings' => 'getSupportedVisualizationFormattings',
        'supported_download_settings' => 'getSupportedDownloadSettings',
        'icon_url' => 'getIconUrl',
        'uses_oauth' => 'getUsesOauth',
        'required_fields' => 'getRequiredFields',
        'privacy_link' => 'getPrivacyLink',
        'delegate_oauth' => 'getDelegateOauth',
        'installed_delegate_oauth_targets' => 'getInstalledDelegateOauthTargets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['integration_hub_id'] = isset($data['integration_hub_id']) ? $data['integration_hub_id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
        $this->container['supported_formats'] = isset($data['supported_formats']) ? $data['supported_formats'] : null;
        $this->container['supported_action_types'] = isset($data['supported_action_types']) ? $data['supported_action_types'] : null;
        $this->container['supported_formattings'] = isset($data['supported_formattings']) ? $data['supported_formattings'] : null;
        $this->container['supported_visualization_formattings'] = isset($data['supported_visualization_formattings']) ? $data['supported_visualization_formattings'] : null;
        $this->container['supported_download_settings'] = isset($data['supported_download_settings']) ? $data['supported_download_settings'] : null;
        $this->container['icon_url'] = isset($data['icon_url']) ? $data['icon_url'] : null;
        $this->container['uses_oauth'] = isset($data['uses_oauth']) ? $data['uses_oauth'] : null;
        $this->container['required_fields'] = isset($data['required_fields']) ? $data['required_fields'] : null;
        $this->container['privacy_link'] = isset($data['privacy_link']) ? $data['privacy_link'] : null;
        $this->container['delegate_oauth'] = isset($data['delegate_oauth']) ? $data['delegate_oauth'] : null;
        $this->container['installed_delegate_oauth_targets'] = isset($data['installed_delegate_oauth_targets']) ? $data['installed_delegate_oauth_targets'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the integration.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets integration_hub_id
     *
     * @return string
     */
    public function getIntegrationHubId()
    {
        return $this->container['integration_hub_id'];
    }

    /**
     * Sets integration_hub_id
     *
     * @param string $integration_hub_id ID of the integration hub.
     *
     * @return $this
     */
    public function setIntegrationHubId($integration_hub_id)
    {
        $this->container['integration_hub_id'] = $integration_hub_id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Label for the integration.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the integration.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Whether the integration is available to users.
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \Swagger\Client\Model\IntegrationParam[]
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \Swagger\Client\Model\IntegrationParam[] $params Array of params for the integration.
     *
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets supported_formats
     *
     * @return string[]
     */
    public function getSupportedFormats()
    {
        return $this->container['supported_formats'];
    }

    /**
     * Sets supported_formats
     *
     * @param string[] $supported_formats A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: \"txt\", \"csv\", \"inline_json\", \"json\", \"json_label\", \"json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\".
     *
     * @return $this
     */
    public function setSupportedFormats($supported_formats)
    {
        $this->container['supported_formats'] = $supported_formats;

        return $this;
    }

    /**
     * Gets supported_action_types
     *
     * @return string[]
     */
    public function getSupportedActionTypes()
    {
        return $this->container['supported_action_types'];
    }

    /**
     * Sets supported_action_types
     *
     * @param string[] $supported_action_types A list of action types the integration supports. Valid values are: \"cell\", \"query\", \"dashboard\", \"none\".
     *
     * @return $this
     */
    public function setSupportedActionTypes($supported_action_types)
    {
        $this->container['supported_action_types'] = $supported_action_types;

        return $this;
    }

    /**
     * Gets supported_formattings
     *
     * @return string[]
     */
    public function getSupportedFormattings()
    {
        return $this->container['supported_formattings'];
    }

    /**
     * Sets supported_formattings
     *
     * @param string[] $supported_formattings A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \"formatted\", \"unformatted\".
     *
     * @return $this
     */
    public function setSupportedFormattings($supported_formattings)
    {
        $this->container['supported_formattings'] = $supported_formattings;

        return $this;
    }

    /**
     * Gets supported_visualization_formattings
     *
     * @return string[]
     */
    public function getSupportedVisualizationFormattings()
    {
        return $this->container['supported_visualization_formattings'];
    }

    /**
     * Sets supported_visualization_formattings
     *
     * @param string[] $supported_visualization_formattings A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \"apply\", \"noapply\".
     *
     * @return $this
     */
    public function setSupportedVisualizationFormattings($supported_visualization_formattings)
    {
        $this->container['supported_visualization_formattings'] = $supported_visualization_formattings;

        return $this;
    }

    /**
     * Gets supported_download_settings
     *
     * @return string[]
     */
    public function getSupportedDownloadSettings()
    {
        return $this->container['supported_download_settings'];
    }

    /**
     * Sets supported_download_settings
     *
     * @param string[] $supported_download_settings A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: \"push\", \"url\".
     *
     * @return $this
     */
    public function setSupportedDownloadSettings($supported_download_settings)
    {
        $this->container['supported_download_settings'] = $supported_download_settings;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string
     */
    public function getIconUrl()
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string $icon_url URL to an icon for the integration.
     *
     * @return $this
     */
    public function setIconUrl($icon_url)
    {
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets uses_oauth
     *
     * @return bool
     */
    public function getUsesOauth()
    {
        return $this->container['uses_oauth'];
    }

    /**
     * Sets uses_oauth
     *
     * @param bool $uses_oauth Whether the integration uses oauth.
     *
     * @return $this
     */
    public function setUsesOauth($uses_oauth)
    {
        $this->container['uses_oauth'] = $uses_oauth;

        return $this;
    }

    /**
     * Gets required_fields
     *
     * @return \Swagger\Client\Model\IntegrationRequiredField[]
     */
    public function getRequiredFields()
    {
        return $this->container['required_fields'];
    }

    /**
     * Sets required_fields
     *
     * @param \Swagger\Client\Model\IntegrationRequiredField[] $required_fields A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required.
     *
     * @return $this
     */
    public function setRequiredFields($required_fields)
    {
        $this->container['required_fields'] = $required_fields;

        return $this;
    }

    /**
     * Gets privacy_link
     *
     * @return string
     */
    public function getPrivacyLink()
    {
        return $this->container['privacy_link'];
    }

    /**
     * Sets privacy_link
     *
     * @param string $privacy_link Link to privacy policy for destination
     *
     * @return $this
     */
    public function setPrivacyLink($privacy_link)
    {
        $this->container['privacy_link'] = $privacy_link;

        return $this;
    }

    /**
     * Gets delegate_oauth
     *
     * @return bool
     */
    public function getDelegateOauth()
    {
        return $this->container['delegate_oauth'];
    }

    /**
     * Sets delegate_oauth
     *
     * @param bool $delegate_oauth Whether the integration uses delegate oauth, which allows federation between an integration installation scope specific entity (like org, group, and team, etc.) and Looker.
     *
     * @return $this
     */
    public function setDelegateOauth($delegate_oauth)
    {
        $this->container['delegate_oauth'] = $delegate_oauth;

        return $this;
    }

    /**
     * Gets installed_delegate_oauth_targets
     *
     * @return string[]
     */
    public function getInstalledDelegateOauthTargets()
    {
        return $this->container['installed_delegate_oauth_targets'];
    }

    /**
     * Sets installed_delegate_oauth_targets
     *
     * @param string[] $installed_delegate_oauth_targets Whether the integration is available to users.
     *
     * @return $this
     */
    public function setInstalledDelegateOauthTargets($installed_delegate_oauth_targets)
    {
        $this->container['installed_delegate_oauth_targets'] = $installed_delegate_oauth_targets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


