<?php
/**
 * EmbedCookielessSessionAcquire
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmbedCookielessSessionAcquire Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmbedCookielessSessionAcquire implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmbedCookielessSessionAcquire';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'session_length' => 'int',
        'force_logout_login' => 'bool',
        'external_user_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'user_timezone' => 'string',
        'permissions' => 'string[]',
        'models' => 'string[]',
        'group_ids' => 'string[]',
        'external_group_id' => 'string',
        'user_attributes' => 'object',
        'session_reference_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'session_length' => 'int64',
        'force_logout_login' => null,
        'external_user_id' => null,
        'first_name' => null,
        'last_name' => null,
        'user_timezone' => null,
        'permissions' => null,
        'models' => null,
        'group_ids' => null,
        'external_group_id' => null,
        'user_attributes' => null,
        'session_reference_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'session_length' => 'session_length',
        'force_logout_login' => 'force_logout_login',
        'external_user_id' => 'external_user_id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'user_timezone' => 'user_timezone',
        'permissions' => 'permissions',
        'models' => 'models',
        'group_ids' => 'group_ids',
        'external_group_id' => 'external_group_id',
        'user_attributes' => 'user_attributes',
        'session_reference_token' => 'session_reference_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'session_length' => 'setSessionLength',
        'force_logout_login' => 'setForceLogoutLogin',
        'external_user_id' => 'setExternalUserId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'user_timezone' => 'setUserTimezone',
        'permissions' => 'setPermissions',
        'models' => 'setModels',
        'group_ids' => 'setGroupIds',
        'external_group_id' => 'setExternalGroupId',
        'user_attributes' => 'setUserAttributes',
        'session_reference_token' => 'setSessionReferenceToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'session_length' => 'getSessionLength',
        'force_logout_login' => 'getForceLogoutLogin',
        'external_user_id' => 'getExternalUserId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'user_timezone' => 'getUserTimezone',
        'permissions' => 'getPermissions',
        'models' => 'getModels',
        'group_ids' => 'getGroupIds',
        'external_group_id' => 'getExternalGroupId',
        'user_attributes' => 'getUserAttributes',
        'session_reference_token' => 'getSessionReferenceToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['session_length'] = isset($data['session_length']) ? $data['session_length'] : null;
        $this->container['force_logout_login'] = isset($data['force_logout_login']) ? $data['force_logout_login'] : null;
        $this->container['external_user_id'] = isset($data['external_user_id']) ? $data['external_user_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['user_timezone'] = isset($data['user_timezone']) ? $data['user_timezone'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['models'] = isset($data['models']) ? $data['models'] : null;
        $this->container['group_ids'] = isset($data['group_ids']) ? $data['group_ids'] : null;
        $this->container['external_group_id'] = isset($data['external_group_id']) ? $data['external_group_id'] : null;
        $this->container['user_attributes'] = isset($data['user_attributes']) ? $data['user_attributes'] : null;
        $this->container['session_reference_token'] = isset($data['session_reference_token']) ? $data['session_reference_token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets session_length
     *
     * @return int
     */
    public function getSessionLength()
    {
        return $this->container['session_length'];
    }

    /**
     * Sets session_length
     *
     * @param int $session_length Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).
     *
     * @return $this
     */
    public function setSessionLength($session_length)
    {
        $this->container['session_length'] = $session_length;

        return $this;
    }

    /**
     * Gets force_logout_login
     *
     * @return bool
     */
    public function getForceLogoutLogin()
    {
        return $this->container['force_logout_login'];
    }

    /**
     * Sets force_logout_login
     *
     * @param bool $force_logout_login When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.
     *
     * @return $this
     */
    public function setForceLogoutLogin($force_logout_login)
    {
        $this->container['force_logout_login'] = $force_logout_login;

        return $this;
    }

    /**
     * Gets external_user_id
     *
     * @return string
     */
    public function getExternalUserId()
    {
        return $this->container['external_user_id'];
    }

    /**
     * Sets external_user_id
     *
     * @param string $external_user_id A value from an external system that uniquely identifies the embed user. Since the user_ids of Looker embed users may change with every embed session, external_user_id provides a way to assign a known, stable user identifier across multiple embed sessions.
     *
     * @return $this
     */
    public function setExternalUserId($external_user_id)
    {
        $this->container['external_user_id'] = $external_user_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name of the embed user. Defaults to 'Embed' if not specified
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name of the embed user. Defaults to 'User' if not specified
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets user_timezone
     *
     * @return string
     */
    public function getUserTimezone()
    {
        return $this->container['user_timezone'];
    }

    /**
     * Sets user_timezone
     *
     * @param string $user_timezone Sets the user timezone for the embed user session, if the User Specific Timezones setting is enabled in the Looker admin settings. A value of `null` forces the embed user to use the Looker Application Default Timezone. You MUST omit this property from the request if the User Specific Timezones setting is disabled. Timezone values are validated against the IANA Timezone standard and can be seen in the Application Time Zone dropdown list on the Looker General Settings admin page.
     *
     * @return $this
     */
    public function setUserTimezone($user_timezone)
    {
        $this->container['user_timezone'] = $user_timezone;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string[]
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string[] $permissions List of Looker permission names to grant to the embed user. Requested permissions will be filtered to permissions allowed for embed sessions.
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets models
     *
     * @return string[]
     */
    public function getModels()
    {
        return $this->container['models'];
    }

    /**
     * Sets models
     *
     * @param string[] $models List of model names that the embed user may access
     *
     * @return $this
     */
    public function setModels($models)
    {
        $this->container['models'] = $models;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return string[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param string[] $group_ids List of Looker group ids in which to enroll the embed user
     *
     * @return $this
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets external_group_id
     *
     * @return string
     */
    public function getExternalGroupId()
    {
        return $this->container['external_group_id'];
    }

    /**
     * Sets external_group_id
     *
     * @param string $external_group_id A unique value identifying an embed-exclusive group. Multiple embed users using the same `external_group_id` value will be able to share Looker content with each other. Content and embed users associated with the `external_group_id` will not be accessible to normal Looker users or embed users not associated with this `external_group_id`.
     *
     * @return $this
     */
    public function setExternalGroupId($external_group_id)
    {
        $this->container['external_group_id'] = $external_group_id;

        return $this;
    }

    /**
     * Gets user_attributes
     *
     * @return object
     */
    public function getUserAttributes()
    {
        return $this->container['user_attributes'];
    }

    /**
     * Sets user_attributes
     *
     * @param object $user_attributes A dictionary of name-value pairs associating a Looker user attribute name with a value.
     *
     * @return $this
     */
    public function setUserAttributes($user_attributes)
    {
        $this->container['user_attributes'] = $user_attributes;

        return $this;
    }

    /**
     * Gets session_reference_token
     *
     * @return string
     */
    public function getSessionReferenceToken()
    {
        return $this->container['session_reference_token'];
    }

    /**
     * Sets session_reference_token
     *
     * @param string $session_reference_token Token referencing the embed session and is used to generate new authentication, navigation and api tokens.
     *
     * @return $this
     */
    public function setSessionReferenceToken($session_reference_token)
    {
        $this->container['session_reference_token'] = $session_reference_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


