<?php
/**
 * SqlQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SqlQuery Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SqlQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SqlQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can' => 'map[string,bool]',
        'slug' => 'string',
        'last_runtime' => 'float',
        'run_count' => 'int',
        'browser_limit' => 'int',
        'sql' => 'string',
        'last_run_at' => 'string',
        'connection' => '\Swagger\Client\Model\DBConnectionBase',
        'model_name' => 'string',
        'creator' => '\Swagger\Client\Model\UserPublic',
        'explore_url' => 'string',
        'plaintext' => 'bool',
        'vis_config' => 'object',
        'result_maker_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'can' => null,
        'slug' => null,
        'last_runtime' => 'float',
        'run_count' => 'int64',
        'browser_limit' => 'int64',
        'sql' => null,
        'last_run_at' => null,
        'connection' => null,
        'model_name' => null,
        'creator' => null,
        'explore_url' => null,
        'plaintext' => null,
        'vis_config' => null,
        'result_maker_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'slug' => 'slug',
        'last_runtime' => 'last_runtime',
        'run_count' => 'run_count',
        'browser_limit' => 'browser_limit',
        'sql' => 'sql',
        'last_run_at' => 'last_run_at',
        'connection' => 'connection',
        'model_name' => 'model_name',
        'creator' => 'creator',
        'explore_url' => 'explore_url',
        'plaintext' => 'plaintext',
        'vis_config' => 'vis_config',
        'result_maker_id' => 'result_maker_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'slug' => 'setSlug',
        'last_runtime' => 'setLastRuntime',
        'run_count' => 'setRunCount',
        'browser_limit' => 'setBrowserLimit',
        'sql' => 'setSql',
        'last_run_at' => 'setLastRunAt',
        'connection' => 'setConnection',
        'model_name' => 'setModelName',
        'creator' => 'setCreator',
        'explore_url' => 'setExploreUrl',
        'plaintext' => 'setPlaintext',
        'vis_config' => 'setVisConfig',
        'result_maker_id' => 'setResultMakerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'slug' => 'getSlug',
        'last_runtime' => 'getLastRuntime',
        'run_count' => 'getRunCount',
        'browser_limit' => 'getBrowserLimit',
        'sql' => 'getSql',
        'last_run_at' => 'getLastRunAt',
        'connection' => 'getConnection',
        'model_name' => 'getModelName',
        'creator' => 'getCreator',
        'explore_url' => 'getExploreUrl',
        'plaintext' => 'getPlaintext',
        'vis_config' => 'getVisConfig',
        'result_maker_id' => 'getResultMakerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['last_runtime'] = isset($data['last_runtime']) ? $data['last_runtime'] : null;
        $this->container['run_count'] = isset($data['run_count']) ? $data['run_count'] : null;
        $this->container['browser_limit'] = isset($data['browser_limit']) ? $data['browser_limit'] : null;
        $this->container['sql'] = isset($data['sql']) ? $data['sql'] : null;
        $this->container['last_run_at'] = isset($data['last_run_at']) ? $data['last_run_at'] : null;
        $this->container['connection'] = isset($data['connection']) ? $data['connection'] : null;
        $this->container['model_name'] = isset($data['model_name']) ? $data['model_name'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['explore_url'] = isset($data['explore_url']) ? $data['explore_url'] : null;
        $this->container['plaintext'] = isset($data['plaintext']) ? $data['plaintext'] : null;
        $this->container['vis_config'] = isset($data['vis_config']) ? $data['vis_config'] : null;
        $this->container['result_maker_id'] = isset($data['result_maker_id']) ? $data['result_maker_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug The identifier of the SQL query
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets last_runtime
     *
     * @return float
     */
    public function getLastRuntime()
    {
        return $this->container['last_runtime'];
    }

    /**
     * Sets last_runtime
     *
     * @param float $last_runtime Number of seconds this query took to run the most recent time it was run
     *
     * @return $this
     */
    public function setLastRuntime($last_runtime)
    {
        $this->container['last_runtime'] = $last_runtime;

        return $this;
    }

    /**
     * Gets run_count
     *
     * @return int
     */
    public function getRunCount()
    {
        return $this->container['run_count'];
    }

    /**
     * Sets run_count
     *
     * @param int $run_count Number of times this query has been run
     *
     * @return $this
     */
    public function setRunCount($run_count)
    {
        $this->container['run_count'] = $run_count;

        return $this;
    }

    /**
     * Gets browser_limit
     *
     * @return int
     */
    public function getBrowserLimit()
    {
        return $this->container['browser_limit'];
    }

    /**
     * Sets browser_limit
     *
     * @param int $browser_limit Maximum number of rows this query will display on the SQL Runner page
     *
     * @return $this
     */
    public function setBrowserLimit($browser_limit)
    {
        $this->container['browser_limit'] = $browser_limit;

        return $this;
    }

    /**
     * Gets sql
     *
     * @return string
     */
    public function getSql()
    {
        return $this->container['sql'];
    }

    /**
     * Sets sql
     *
     * @param string $sql SQL query text
     *
     * @return $this
     */
    public function setSql($sql)
    {
        $this->container['sql'] = $sql;

        return $this;
    }

    /**
     * Gets last_run_at
     *
     * @return string
     */
    public function getLastRunAt()
    {
        return $this->container['last_run_at'];
    }

    /**
     * Sets last_run_at
     *
     * @param string $last_run_at The most recent time this query was run
     *
     * @return $this
     */
    public function setLastRunAt($last_run_at)
    {
        $this->container['last_run_at'] = $last_run_at;

        return $this;
    }

    /**
     * Gets connection
     *
     * @return \Swagger\Client\Model\DBConnectionBase
     */
    public function getConnection()
    {
        return $this->container['connection'];
    }

    /**
     * Sets connection
     *
     * @param \Swagger\Client\Model\DBConnectionBase $connection Connection this query uses
     *
     * @return $this
     */
    public function setConnection($connection)
    {
        $this->container['connection'] = $connection;

        return $this;
    }

    /**
     * Gets model_name
     *
     * @return string
     */
    public function getModelName()
    {
        return $this->container['model_name'];
    }

    /**
     * Sets model_name
     *
     * @param string $model_name Model name this query uses
     *
     * @return $this
     */
    public function setModelName($model_name)
    {
        $this->container['model_name'] = $model_name;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \Swagger\Client\Model\UserPublic
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \Swagger\Client\Model\UserPublic $creator User who created this SQL query
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets explore_url
     *
     * @return string
     */
    public function getExploreUrl()
    {
        return $this->container['explore_url'];
    }

    /**
     * Sets explore_url
     *
     * @param string $explore_url Explore page URL for this SQL query
     *
     * @return $this
     */
    public function setExploreUrl($explore_url)
    {
        $this->container['explore_url'] = $explore_url;

        return $this;
    }

    /**
     * Gets plaintext
     *
     * @return bool
     */
    public function getPlaintext()
    {
        return $this->container['plaintext'];
    }

    /**
     * Sets plaintext
     *
     * @param bool $plaintext Should this query be rendered as plain text
     *
     * @return $this
     */
    public function setPlaintext($plaintext)
    {
        $this->container['plaintext'] = $plaintext;

        return $this;
    }

    /**
     * Gets vis_config
     *
     * @return object
     */
    public function getVisConfig()
    {
        return $this->container['vis_config'];
    }

    /**
     * Sets vis_config
     *
     * @param object $vis_config Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \"type\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
     *
     * @return $this
     */
    public function setVisConfig($vis_config)
    {
        $this->container['vis_config'] = $vis_config;

        return $this;
    }

    /**
     * Gets result_maker_id
     *
     * @return string
     */
    public function getResultMakerId()
    {
        return $this->container['result_maker_id'];
    }

    /**
     * Sets result_maker_id
     *
     * @param string $result_maker_id ID of the ResultMakerLookup entry.
     *
     * @return $this
     */
    public function setResultMakerId($result_maker_id)
    {
        $this->container['result_maker_id'] = $result_maker_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


