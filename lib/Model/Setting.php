<?php
/**
 * Setting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Setting Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Setting implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Setting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'extension_framework_enabled' => 'bool',
        'extension_load_url_enabled' => 'bool',
        'marketplace_auto_install_enabled' => 'bool',
        'marketplace_enabled' => 'bool',
        'privatelabel_configuration' => '\Swagger\Client\Model\PrivatelabelConfiguration',
        'custom_welcome_email' => '\Swagger\Client\Model\CustomWelcomeEmail',
        'onboarding_enabled' => 'bool',
        'timezone' => 'string',
        'allow_user_timezones' => 'bool',
        'data_connector_default_enabled' => 'bool',
        'host_url' => 'string',
        'override_warnings' => 'bool',
        'email_domain_allowlist' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'extension_framework_enabled' => null,
        'extension_load_url_enabled' => null,
        'marketplace_auto_install_enabled' => null,
        'marketplace_enabled' => null,
        'privatelabel_configuration' => null,
        'custom_welcome_email' => null,
        'onboarding_enabled' => null,
        'timezone' => null,
        'allow_user_timezones' => null,
        'data_connector_default_enabled' => null,
        'host_url' => null,
        'override_warnings' => null,
        'email_domain_allowlist' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extension_framework_enabled' => 'extension_framework_enabled',
        'extension_load_url_enabled' => 'extension_load_url_enabled',
        'marketplace_auto_install_enabled' => 'marketplace_auto_install_enabled',
        'marketplace_enabled' => 'marketplace_enabled',
        'privatelabel_configuration' => 'privatelabel_configuration',
        'custom_welcome_email' => 'custom_welcome_email',
        'onboarding_enabled' => 'onboarding_enabled',
        'timezone' => 'timezone',
        'allow_user_timezones' => 'allow_user_timezones',
        'data_connector_default_enabled' => 'data_connector_default_enabled',
        'host_url' => 'host_url',
        'override_warnings' => 'override_warnings',
        'email_domain_allowlist' => 'email_domain_allowlist'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extension_framework_enabled' => 'setExtensionFrameworkEnabled',
        'extension_load_url_enabled' => 'setExtensionLoadUrlEnabled',
        'marketplace_auto_install_enabled' => 'setMarketplaceAutoInstallEnabled',
        'marketplace_enabled' => 'setMarketplaceEnabled',
        'privatelabel_configuration' => 'setPrivatelabelConfiguration',
        'custom_welcome_email' => 'setCustomWelcomeEmail',
        'onboarding_enabled' => 'setOnboardingEnabled',
        'timezone' => 'setTimezone',
        'allow_user_timezones' => 'setAllowUserTimezones',
        'data_connector_default_enabled' => 'setDataConnectorDefaultEnabled',
        'host_url' => 'setHostUrl',
        'override_warnings' => 'setOverrideWarnings',
        'email_domain_allowlist' => 'setEmailDomainAllowlist'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extension_framework_enabled' => 'getExtensionFrameworkEnabled',
        'extension_load_url_enabled' => 'getExtensionLoadUrlEnabled',
        'marketplace_auto_install_enabled' => 'getMarketplaceAutoInstallEnabled',
        'marketplace_enabled' => 'getMarketplaceEnabled',
        'privatelabel_configuration' => 'getPrivatelabelConfiguration',
        'custom_welcome_email' => 'getCustomWelcomeEmail',
        'onboarding_enabled' => 'getOnboardingEnabled',
        'timezone' => 'getTimezone',
        'allow_user_timezones' => 'getAllowUserTimezones',
        'data_connector_default_enabled' => 'getDataConnectorDefaultEnabled',
        'host_url' => 'getHostUrl',
        'override_warnings' => 'getOverrideWarnings',
        'email_domain_allowlist' => 'getEmailDomainAllowlist'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['extension_framework_enabled'] = isset($data['extension_framework_enabled']) ? $data['extension_framework_enabled'] : null;
        $this->container['extension_load_url_enabled'] = isset($data['extension_load_url_enabled']) ? $data['extension_load_url_enabled'] : null;
        $this->container['marketplace_auto_install_enabled'] = isset($data['marketplace_auto_install_enabled']) ? $data['marketplace_auto_install_enabled'] : null;
        $this->container['marketplace_enabled'] = isset($data['marketplace_enabled']) ? $data['marketplace_enabled'] : null;
        $this->container['privatelabel_configuration'] = isset($data['privatelabel_configuration']) ? $data['privatelabel_configuration'] : null;
        $this->container['custom_welcome_email'] = isset($data['custom_welcome_email']) ? $data['custom_welcome_email'] : null;
        $this->container['onboarding_enabled'] = isset($data['onboarding_enabled']) ? $data['onboarding_enabled'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['allow_user_timezones'] = isset($data['allow_user_timezones']) ? $data['allow_user_timezones'] : null;
        $this->container['data_connector_default_enabled'] = isset($data['data_connector_default_enabled']) ? $data['data_connector_default_enabled'] : null;
        $this->container['host_url'] = isset($data['host_url']) ? $data['host_url'] : null;
        $this->container['override_warnings'] = isset($data['override_warnings']) ? $data['override_warnings'] : null;
        $this->container['email_domain_allowlist'] = isset($data['email_domain_allowlist']) ? $data['email_domain_allowlist'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets extension_framework_enabled
     *
     * @return bool
     */
    public function getExtensionFrameworkEnabled()
    {
        return $this->container['extension_framework_enabled'];
    }

    /**
     * Sets extension_framework_enabled
     *
     * @param bool $extension_framework_enabled Toggle extension framework on or off
     *
     * @return $this
     */
    public function setExtensionFrameworkEnabled($extension_framework_enabled)
    {
        $this->container['extension_framework_enabled'] = $extension_framework_enabled;

        return $this;
    }

    /**
     * Gets extension_load_url_enabled
     *
     * @return bool
     */
    public function getExtensionLoadUrlEnabled()
    {
        return $this->container['extension_load_url_enabled'];
    }

    /**
     * Sets extension_load_url_enabled
     *
     * @param bool $extension_load_url_enabled (DEPRECATED) Toggle extension extension load url on or off. Do not use. This is temporary setting that will eventually become a noop and subsequently deleted.
     *
     * @return $this
     */
    public function setExtensionLoadUrlEnabled($extension_load_url_enabled)
    {
        $this->container['extension_load_url_enabled'] = $extension_load_url_enabled;

        return $this;
    }

    /**
     * Gets marketplace_auto_install_enabled
     *
     * @return bool
     */
    public function getMarketplaceAutoInstallEnabled()
    {
        return $this->container['marketplace_auto_install_enabled'];
    }

    /**
     * Sets marketplace_auto_install_enabled
     *
     * @param bool $marketplace_auto_install_enabled Toggle marketplace auto install on or off. Note that auto install only runs if marketplace is enabled.
     *
     * @return $this
     */
    public function setMarketplaceAutoInstallEnabled($marketplace_auto_install_enabled)
    {
        $this->container['marketplace_auto_install_enabled'] = $marketplace_auto_install_enabled;

        return $this;
    }

    /**
     * Gets marketplace_enabled
     *
     * @return bool
     */
    public function getMarketplaceEnabled()
    {
        return $this->container['marketplace_enabled'];
    }

    /**
     * Sets marketplace_enabled
     *
     * @param bool $marketplace_enabled Toggle marketplace on or off
     *
     * @return $this
     */
    public function setMarketplaceEnabled($marketplace_enabled)
    {
        $this->container['marketplace_enabled'] = $marketplace_enabled;

        return $this;
    }

    /**
     * Gets privatelabel_configuration
     *
     * @return \Swagger\Client\Model\PrivatelabelConfiguration
     */
    public function getPrivatelabelConfiguration()
    {
        return $this->container['privatelabel_configuration'];
    }

    /**
     * Sets privatelabel_configuration
     *
     * @param \Swagger\Client\Model\PrivatelabelConfiguration $privatelabel_configuration Private label configuration
     *
     * @return $this
     */
    public function setPrivatelabelConfiguration($privatelabel_configuration)
    {
        $this->container['privatelabel_configuration'] = $privatelabel_configuration;

        return $this;
    }

    /**
     * Gets custom_welcome_email
     *
     * @return \Swagger\Client\Model\CustomWelcomeEmail
     */
    public function getCustomWelcomeEmail()
    {
        return $this->container['custom_welcome_email'];
    }

    /**
     * Sets custom_welcome_email
     *
     * @param \Swagger\Client\Model\CustomWelcomeEmail $custom_welcome_email Custom welcome email configuration
     *
     * @return $this
     */
    public function setCustomWelcomeEmail($custom_welcome_email)
    {
        $this->container['custom_welcome_email'] = $custom_welcome_email;

        return $this;
    }

    /**
     * Gets onboarding_enabled
     *
     * @return bool
     */
    public function getOnboardingEnabled()
    {
        return $this->container['onboarding_enabled'];
    }

    /**
     * Sets onboarding_enabled
     *
     * @param bool $onboarding_enabled Toggle onboarding on or off
     *
     * @return $this
     */
    public function setOnboardingEnabled($onboarding_enabled)
    {
        $this->container['onboarding_enabled'] = $onboarding_enabled;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Change instance-wide default timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets allow_user_timezones
     *
     * @return bool
     */
    public function getAllowUserTimezones()
    {
        return $this->container['allow_user_timezones'];
    }

    /**
     * Sets allow_user_timezones
     *
     * @param bool $allow_user_timezones Toggle user-specific timezones on or off
     *
     * @return $this
     */
    public function setAllowUserTimezones($allow_user_timezones)
    {
        $this->container['allow_user_timezones'] = $allow_user_timezones;

        return $this;
    }

    /**
     * Gets data_connector_default_enabled
     *
     * @return bool
     */
    public function getDataConnectorDefaultEnabled()
    {
        return $this->container['data_connector_default_enabled'];
    }

    /**
     * Sets data_connector_default_enabled
     *
     * @param bool $data_connector_default_enabled Toggle default future connectors on or off
     *
     * @return $this
     */
    public function setDataConnectorDefaultEnabled($data_connector_default_enabled)
    {
        $this->container['data_connector_default_enabled'] = $data_connector_default_enabled;

        return $this;
    }

    /**
     * Gets host_url
     *
     * @return string
     */
    public function getHostUrl()
    {
        return $this->container['host_url'];
    }

    /**
     * Sets host_url
     *
     * @param string $host_url Change the base portion of your Looker instance URL setting
     *
     * @return $this
     */
    public function setHostUrl($host_url)
    {
        $this->container['host_url'] = $host_url;

        return $this;
    }

    /**
     * Gets override_warnings
     *
     * @return bool
     */
    public function getOverrideWarnings()
    {
        return $this->container['override_warnings'];
    }

    /**
     * Sets override_warnings
     *
     * @param bool $override_warnings (Write-Only) If warnings are preventing a host URL change, this parameter allows for overriding warnings to force update the setting. Does not directly change any Looker settings.
     *
     * @return $this
     */
    public function setOverrideWarnings($override_warnings)
    {
        $this->container['override_warnings'] = $override_warnings;

        return $this;
    }

    /**
     * Gets email_domain_allowlist
     *
     * @return string[]
     */
    public function getEmailDomainAllowlist()
    {
        return $this->container['email_domain_allowlist'];
    }

    /**
     * Sets email_domain_allowlist
     *
     * @param string[] $email_domain_allowlist An array of Email Domain Allowlist of type string for Scheduled Content
     *
     * @return $this
     */
    public function setEmailDomainAllowlist($email_domain_allowlist)
    {
        $this->container['email_domain_allowlist'] = $email_domain_allowlist;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


