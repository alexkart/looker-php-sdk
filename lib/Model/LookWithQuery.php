<?php
/**
 * LookWithQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LookWithQuery Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LookWithQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LookWithQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can' => 'map[string,bool]',
        'content_metadata_id' => 'string',
        'id' => 'string',
        'title' => 'string',
        'user_id' => 'string',
        'content_favorite_id' => 'string',
        'created_at' => '\DateTime',
        'deleted' => 'bool',
        'deleted_at' => '\DateTime',
        'deleter_id' => 'string',
        'description' => 'string',
        'embed_url' => 'string',
        'excel_file_url' => 'string',
        'favorite_count' => 'int',
        'google_spreadsheet_formula' => 'string',
        'image_embed_url' => 'string',
        'is_run_on_load' => 'bool',
        'last_accessed_at' => '\DateTime',
        'last_updater_id' => 'string',
        'last_viewed_at' => '\DateTime',
        'model' => '\Swagger\Client\Model\LookModel',
        'public' => 'bool',
        'public_slug' => 'string',
        'public_url' => 'string',
        'query_id' => 'string',
        'short_url' => 'string',
        'folder' => '\Swagger\Client\Model\FolderBase',
        'folder_id' => 'string',
        'updated_at' => '\DateTime',
        'view_count' => 'int',
        'query' => '\Swagger\Client\Model\Query',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'can' => null,
        'content_metadata_id' => null,
        'id' => null,
        'title' => null,
        'user_id' => null,
        'content_favorite_id' => null,
        'created_at' => 'date-time',
        'deleted' => null,
        'deleted_at' => 'date-time',
        'deleter_id' => null,
        'description' => null,
        'embed_url' => null,
        'excel_file_url' => null,
        'favorite_count' => 'int64',
        'google_spreadsheet_formula' => null,
        'image_embed_url' => null,
        'is_run_on_load' => null,
        'last_accessed_at' => 'date-time',
        'last_updater_id' => null,
        'last_viewed_at' => 'date-time',
        'model' => null,
        'public' => null,
        'public_slug' => null,
        'public_url' => null,
        'query_id' => null,
        'short_url' => null,
        'folder' => null,
        'folder_id' => null,
        'updated_at' => 'date-time',
        'view_count' => 'int64',
        'query' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'content_metadata_id' => 'content_metadata_id',
        'id' => 'id',
        'title' => 'title',
        'user_id' => 'user_id',
        'content_favorite_id' => 'content_favorite_id',
        'created_at' => 'created_at',
        'deleted' => 'deleted',
        'deleted_at' => 'deleted_at',
        'deleter_id' => 'deleter_id',
        'description' => 'description',
        'embed_url' => 'embed_url',
        'excel_file_url' => 'excel_file_url',
        'favorite_count' => 'favorite_count',
        'google_spreadsheet_formula' => 'google_spreadsheet_formula',
        'image_embed_url' => 'image_embed_url',
        'is_run_on_load' => 'is_run_on_load',
        'last_accessed_at' => 'last_accessed_at',
        'last_updater_id' => 'last_updater_id',
        'last_viewed_at' => 'last_viewed_at',
        'model' => 'model',
        'public' => 'public',
        'public_slug' => 'public_slug',
        'public_url' => 'public_url',
        'query_id' => 'query_id',
        'short_url' => 'short_url',
        'folder' => 'folder',
        'folder_id' => 'folder_id',
        'updated_at' => 'updated_at',
        'view_count' => 'view_count',
        'query' => 'query',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'content_metadata_id' => 'setContentMetadataId',
        'id' => 'setId',
        'title' => 'setTitle',
        'user_id' => 'setUserId',
        'content_favorite_id' => 'setContentFavoriteId',
        'created_at' => 'setCreatedAt',
        'deleted' => 'setDeleted',
        'deleted_at' => 'setDeletedAt',
        'deleter_id' => 'setDeleterId',
        'description' => 'setDescription',
        'embed_url' => 'setEmbedUrl',
        'excel_file_url' => 'setExcelFileUrl',
        'favorite_count' => 'setFavoriteCount',
        'google_spreadsheet_formula' => 'setGoogleSpreadsheetFormula',
        'image_embed_url' => 'setImageEmbedUrl',
        'is_run_on_load' => 'setIsRunOnLoad',
        'last_accessed_at' => 'setLastAccessedAt',
        'last_updater_id' => 'setLastUpdaterId',
        'last_viewed_at' => 'setLastViewedAt',
        'model' => 'setModel',
        'public' => 'setPublic',
        'public_slug' => 'setPublicSlug',
        'public_url' => 'setPublicUrl',
        'query_id' => 'setQueryId',
        'short_url' => 'setShortUrl',
        'folder' => 'setFolder',
        'folder_id' => 'setFolderId',
        'updated_at' => 'setUpdatedAt',
        'view_count' => 'setViewCount',
        'query' => 'setQuery',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'content_metadata_id' => 'getContentMetadataId',
        'id' => 'getId',
        'title' => 'getTitle',
        'user_id' => 'getUserId',
        'content_favorite_id' => 'getContentFavoriteId',
        'created_at' => 'getCreatedAt',
        'deleted' => 'getDeleted',
        'deleted_at' => 'getDeletedAt',
        'deleter_id' => 'getDeleterId',
        'description' => 'getDescription',
        'embed_url' => 'getEmbedUrl',
        'excel_file_url' => 'getExcelFileUrl',
        'favorite_count' => 'getFavoriteCount',
        'google_spreadsheet_formula' => 'getGoogleSpreadsheetFormula',
        'image_embed_url' => 'getImageEmbedUrl',
        'is_run_on_load' => 'getIsRunOnLoad',
        'last_accessed_at' => 'getLastAccessedAt',
        'last_updater_id' => 'getLastUpdaterId',
        'last_viewed_at' => 'getLastViewedAt',
        'model' => 'getModel',
        'public' => 'getPublic',
        'public_slug' => 'getPublicSlug',
        'public_url' => 'getPublicUrl',
        'query_id' => 'getQueryId',
        'short_url' => 'getShortUrl',
        'folder' => 'getFolder',
        'folder_id' => 'getFolderId',
        'updated_at' => 'getUpdatedAt',
        'view_count' => 'getViewCount',
        'query' => 'getQuery',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
        $this->container['content_metadata_id'] = isset($data['content_metadata_id']) ? $data['content_metadata_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['content_favorite_id'] = isset($data['content_favorite_id']) ? $data['content_favorite_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['deleter_id'] = isset($data['deleter_id']) ? $data['deleter_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['embed_url'] = isset($data['embed_url']) ? $data['embed_url'] : null;
        $this->container['excel_file_url'] = isset($data['excel_file_url']) ? $data['excel_file_url'] : null;
        $this->container['favorite_count'] = isset($data['favorite_count']) ? $data['favorite_count'] : null;
        $this->container['google_spreadsheet_formula'] = isset($data['google_spreadsheet_formula']) ? $data['google_spreadsheet_formula'] : null;
        $this->container['image_embed_url'] = isset($data['image_embed_url']) ? $data['image_embed_url'] : null;
        $this->container['is_run_on_load'] = isset($data['is_run_on_load']) ? $data['is_run_on_load'] : null;
        $this->container['last_accessed_at'] = isset($data['last_accessed_at']) ? $data['last_accessed_at'] : null;
        $this->container['last_updater_id'] = isset($data['last_updater_id']) ? $data['last_updater_id'] : null;
        $this->container['last_viewed_at'] = isset($data['last_viewed_at']) ? $data['last_viewed_at'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['public_slug'] = isset($data['public_slug']) ? $data['public_slug'] : null;
        $this->container['public_url'] = isset($data['public_url']) ? $data['public_url'] : null;
        $this->container['query_id'] = isset($data['query_id']) ? $data['query_id'] : null;
        $this->container['short_url'] = isset($data['short_url']) ? $data['short_url'] : null;
        $this->container['folder'] = isset($data['folder']) ? $data['folder'] : null;
        $this->container['folder_id'] = isset($data['folder_id']) ? $data['folder_id'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['view_count'] = isset($data['view_count']) ? $data['view_count'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets content_metadata_id
     *
     * @return string
     */
    public function getContentMetadataId()
    {
        return $this->container['content_metadata_id'];
    }

    /**
     * Sets content_metadata_id
     *
     * @param string $content_metadata_id Id of content metadata
     *
     * @return $this
     */
    public function setContentMetadataId($content_metadata_id)
    {
        $this->container['content_metadata_id'] = $content_metadata_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Look Title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id User Id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets content_favorite_id
     *
     * @return string
     */
    public function getContentFavoriteId()
    {
        return $this->container['content_favorite_id'];
    }

    /**
     * Sets content_favorite_id
     *
     * @param string $content_favorite_id Content Favorite Id
     *
     * @return $this
     */
    public function setContentFavoriteId($content_favorite_id)
    {
        $this->container['content_favorite_id'] = $content_favorite_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Time that the Look was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Whether or not a look is 'soft' deleted.
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at Time that the Look was deleted.
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets deleter_id
     *
     * @return string
     */
    public function getDeleterId()
    {
        return $this->container['deleter_id'];
    }

    /**
     * Sets deleter_id
     *
     * @param string $deleter_id Id of User that deleted the look.
     *
     * @return $this
     */
    public function setDeleterId($deleter_id)
    {
        $this->container['deleter_id'] = $deleter_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets embed_url
     *
     * @return string
     */
    public function getEmbedUrl()
    {
        return $this->container['embed_url'];
    }

    /**
     * Sets embed_url
     *
     * @param string $embed_url Embed Url
     *
     * @return $this
     */
    public function setEmbedUrl($embed_url)
    {
        $this->container['embed_url'] = $embed_url;

        return $this;
    }

    /**
     * Gets excel_file_url
     *
     * @return string
     */
    public function getExcelFileUrl()
    {
        return $this->container['excel_file_url'];
    }

    /**
     * Sets excel_file_url
     *
     * @param string $excel_file_url Excel File Url
     *
     * @return $this
     */
    public function setExcelFileUrl($excel_file_url)
    {
        $this->container['excel_file_url'] = $excel_file_url;

        return $this;
    }

    /**
     * Gets favorite_count
     *
     * @return int
     */
    public function getFavoriteCount()
    {
        return $this->container['favorite_count'];
    }

    /**
     * Sets favorite_count
     *
     * @param int $favorite_count Number of times favorited
     *
     * @return $this
     */
    public function setFavoriteCount($favorite_count)
    {
        $this->container['favorite_count'] = $favorite_count;

        return $this;
    }

    /**
     * Gets google_spreadsheet_formula
     *
     * @return string
     */
    public function getGoogleSpreadsheetFormula()
    {
        return $this->container['google_spreadsheet_formula'];
    }

    /**
     * Sets google_spreadsheet_formula
     *
     * @param string $google_spreadsheet_formula Google Spreadsheet Formula
     *
     * @return $this
     */
    public function setGoogleSpreadsheetFormula($google_spreadsheet_formula)
    {
        $this->container['google_spreadsheet_formula'] = $google_spreadsheet_formula;

        return $this;
    }

    /**
     * Gets image_embed_url
     *
     * @return string
     */
    public function getImageEmbedUrl()
    {
        return $this->container['image_embed_url'];
    }

    /**
     * Sets image_embed_url
     *
     * @param string $image_embed_url Image Embed Url
     *
     * @return $this
     */
    public function setImageEmbedUrl($image_embed_url)
    {
        $this->container['image_embed_url'] = $image_embed_url;

        return $this;
    }

    /**
     * Gets is_run_on_load
     *
     * @return bool
     */
    public function getIsRunOnLoad()
    {
        return $this->container['is_run_on_load'];
    }

    /**
     * Sets is_run_on_load
     *
     * @param bool $is_run_on_load auto-run query when Look viewed
     *
     * @return $this
     */
    public function setIsRunOnLoad($is_run_on_load)
    {
        $this->container['is_run_on_load'] = $is_run_on_load;

        return $this;
    }

    /**
     * Gets last_accessed_at
     *
     * @return \DateTime
     */
    public function getLastAccessedAt()
    {
        return $this->container['last_accessed_at'];
    }

    /**
     * Sets last_accessed_at
     *
     * @param \DateTime $last_accessed_at Time that the Look was last accessed by any user
     *
     * @return $this
     */
    public function setLastAccessedAt($last_accessed_at)
    {
        $this->container['last_accessed_at'] = $last_accessed_at;

        return $this;
    }

    /**
     * Gets last_updater_id
     *
     * @return string
     */
    public function getLastUpdaterId()
    {
        return $this->container['last_updater_id'];
    }

    /**
     * Sets last_updater_id
     *
     * @param string $last_updater_id Id of User that last updated the look.
     *
     * @return $this
     */
    public function setLastUpdaterId($last_updater_id)
    {
        $this->container['last_updater_id'] = $last_updater_id;

        return $this;
    }

    /**
     * Gets last_viewed_at
     *
     * @return \DateTime
     */
    public function getLastViewedAt()
    {
        return $this->container['last_viewed_at'];
    }

    /**
     * Sets last_viewed_at
     *
     * @param \DateTime $last_viewed_at Time last viewed in the Looker web UI
     *
     * @return $this
     */
    public function setLastViewedAt($last_viewed_at)
    {
        $this->container['last_viewed_at'] = $last_viewed_at;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \Swagger\Client\Model\LookModel
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \Swagger\Client\Model\LookModel $model Model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool $public Is Public
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets public_slug
     *
     * @return string
     */
    public function getPublicSlug()
    {
        return $this->container['public_slug'];
    }

    /**
     * Sets public_slug
     *
     * @param string $public_slug Public Slug
     *
     * @return $this
     */
    public function setPublicSlug($public_slug)
    {
        $this->container['public_slug'] = $public_slug;

        return $this;
    }

    /**
     * Gets public_url
     *
     * @return string
     */
    public function getPublicUrl()
    {
        return $this->container['public_url'];
    }

    /**
     * Sets public_url
     *
     * @param string $public_url Public Url
     *
     * @return $this
     */
    public function setPublicUrl($public_url)
    {
        $this->container['public_url'] = $public_url;

        return $this;
    }

    /**
     * Gets query_id
     *
     * @return string
     */
    public function getQueryId()
    {
        return $this->container['query_id'];
    }

    /**
     * Sets query_id
     *
     * @param string $query_id Query Id
     *
     * @return $this
     */
    public function setQueryId($query_id)
    {
        $this->container['query_id'] = $query_id;

        return $this;
    }

    /**
     * Gets short_url
     *
     * @return string
     */
    public function getShortUrl()
    {
        return $this->container['short_url'];
    }

    /**
     * Sets short_url
     *
     * @param string $short_url Short Url
     *
     * @return $this
     */
    public function setShortUrl($short_url)
    {
        $this->container['short_url'] = $short_url;

        return $this;
    }

    /**
     * Gets folder
     *
     * @return \Swagger\Client\Model\FolderBase
     */
    public function getFolder()
    {
        return $this->container['folder'];
    }

    /**
     * Sets folder
     *
     * @param \Swagger\Client\Model\FolderBase $folder Folder of this Look
     *
     * @return $this
     */
    public function setFolder($folder)
    {
        $this->container['folder'] = $folder;

        return $this;
    }

    /**
     * Gets folder_id
     *
     * @return string
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     *
     * @param string $folder_id Folder Id
     *
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Time that the Look was updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return int
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param int $view_count Number of times viewed in the Looker web UI
     *
     * @return $this
     */
    public function setViewCount($view_count)
    {
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets query
     *
     * @return \Swagger\Client\Model\Query
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param \Swagger\Client\Model\Query $query Query
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


