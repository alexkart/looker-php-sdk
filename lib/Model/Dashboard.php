<?php
/**
 * Dashboard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Dashboard Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Dashboard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Dashboard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can' => 'map[string,bool]',
        'content_favorite_id' => 'string',
        'content_metadata_id' => 'string',
        'description' => 'string',
        'hidden' => 'bool',
        'id' => 'string',
        'model' => '\Swagger\Client\Model\LookModel',
        'query_timezone' => 'string',
        'readonly' => 'bool',
        'refresh_interval' => 'string',
        'refresh_interval_to_i' => 'int',
        'folder' => '\Swagger\Client\Model\FolderBase',
        'title' => 'string',
        'user_id' => 'string',
        'slug' => 'string',
        'preferred_viewer' => 'string',
        'alert_sync_with_dashboard_filter_enabled' => 'bool',
        'background_color' => 'string',
        'created_at' => '\DateTime',
        'crossfilter_enabled' => 'bool',
        'dashboard_elements' => '\Swagger\Client\Model\DashboardElement[]',
        'dashboard_filters' => '\Swagger\Client\Model\DashboardFilter[]',
        'dashboard_layouts' => '\Swagger\Client\Model\DashboardLayout[]',
        'deleted' => 'bool',
        'deleted_at' => '\DateTime',
        'deleter_id' => 'string',
        'edit_uri' => 'string',
        'enable_viz_full_screen' => 'bool',
        'favorite_count' => 'int',
        'filters_bar_collapsed' => 'bool',
        'filters_location_top' => 'bool',
        'last_accessed_at' => '\DateTime',
        'last_viewed_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'last_updater_id' => 'string',
        'last_updater_name' => 'string',
        'user_name' => 'string',
        'load_configuration' => 'string',
        'lookml_link_id' => 'string',
        'show_filters_bar' => 'bool',
        'show_title' => 'bool',
        'folder_id' => 'string',
        'text_tile_text_color' => 'string',
        'tile_background_color' => 'string',
        'tile_text_color' => 'string',
        'title_color' => 'string',
        'view_count' => 'int',
        'appearance' => '\Swagger\Client\Model\DashboardAppearance',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'can' => null,
        'content_favorite_id' => null,
        'content_metadata_id' => null,
        'description' => null,
        'hidden' => null,
        'id' => null,
        'model' => null,
        'query_timezone' => null,
        'readonly' => null,
        'refresh_interval' => null,
        'refresh_interval_to_i' => 'int64',
        'folder' => null,
        'title' => null,
        'user_id' => null,
        'slug' => null,
        'preferred_viewer' => null,
        'alert_sync_with_dashboard_filter_enabled' => null,
        'background_color' => null,
        'created_at' => 'date-time',
        'crossfilter_enabled' => null,
        'dashboard_elements' => null,
        'dashboard_filters' => null,
        'dashboard_layouts' => null,
        'deleted' => null,
        'deleted_at' => 'date-time',
        'deleter_id' => null,
        'edit_uri' => 'uri-reference',
        'enable_viz_full_screen' => null,
        'favorite_count' => 'int64',
        'filters_bar_collapsed' => null,
        'filters_location_top' => null,
        'last_accessed_at' => 'date-time',
        'last_viewed_at' => 'date-time',
        'updated_at' => 'date-time',
        'last_updater_id' => null,
        'last_updater_name' => null,
        'user_name' => null,
        'load_configuration' => null,
        'lookml_link_id' => null,
        'show_filters_bar' => null,
        'show_title' => null,
        'folder_id' => null,
        'text_tile_text_color' => null,
        'tile_background_color' => null,
        'tile_text_color' => null,
        'title_color' => null,
        'view_count' => 'int64',
        'appearance' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'content_favorite_id' => 'content_favorite_id',
        'content_metadata_id' => 'content_metadata_id',
        'description' => 'description',
        'hidden' => 'hidden',
        'id' => 'id',
        'model' => 'model',
        'query_timezone' => 'query_timezone',
        'readonly' => 'readonly',
        'refresh_interval' => 'refresh_interval',
        'refresh_interval_to_i' => 'refresh_interval_to_i',
        'folder' => 'folder',
        'title' => 'title',
        'user_id' => 'user_id',
        'slug' => 'slug',
        'preferred_viewer' => 'preferred_viewer',
        'alert_sync_with_dashboard_filter_enabled' => 'alert_sync_with_dashboard_filter_enabled',
        'background_color' => 'background_color',
        'created_at' => 'created_at',
        'crossfilter_enabled' => 'crossfilter_enabled',
        'dashboard_elements' => 'dashboard_elements',
        'dashboard_filters' => 'dashboard_filters',
        'dashboard_layouts' => 'dashboard_layouts',
        'deleted' => 'deleted',
        'deleted_at' => 'deleted_at',
        'deleter_id' => 'deleter_id',
        'edit_uri' => 'edit_uri',
        'enable_viz_full_screen' => 'enable_viz_full_screen',
        'favorite_count' => 'favorite_count',
        'filters_bar_collapsed' => 'filters_bar_collapsed',
        'filters_location_top' => 'filters_location_top',
        'last_accessed_at' => 'last_accessed_at',
        'last_viewed_at' => 'last_viewed_at',
        'updated_at' => 'updated_at',
        'last_updater_id' => 'last_updater_id',
        'last_updater_name' => 'last_updater_name',
        'user_name' => 'user_name',
        'load_configuration' => 'load_configuration',
        'lookml_link_id' => 'lookml_link_id',
        'show_filters_bar' => 'show_filters_bar',
        'show_title' => 'show_title',
        'folder_id' => 'folder_id',
        'text_tile_text_color' => 'text_tile_text_color',
        'tile_background_color' => 'tile_background_color',
        'tile_text_color' => 'tile_text_color',
        'title_color' => 'title_color',
        'view_count' => 'view_count',
        'appearance' => 'appearance',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'content_favorite_id' => 'setContentFavoriteId',
        'content_metadata_id' => 'setContentMetadataId',
        'description' => 'setDescription',
        'hidden' => 'setHidden',
        'id' => 'setId',
        'model' => 'setModel',
        'query_timezone' => 'setQueryTimezone',
        'readonly' => 'setReadonly',
        'refresh_interval' => 'setRefreshInterval',
        'refresh_interval_to_i' => 'setRefreshIntervalToI',
        'folder' => 'setFolder',
        'title' => 'setTitle',
        'user_id' => 'setUserId',
        'slug' => 'setSlug',
        'preferred_viewer' => 'setPreferredViewer',
        'alert_sync_with_dashboard_filter_enabled' => 'setAlertSyncWithDashboardFilterEnabled',
        'background_color' => 'setBackgroundColor',
        'created_at' => 'setCreatedAt',
        'crossfilter_enabled' => 'setCrossfilterEnabled',
        'dashboard_elements' => 'setDashboardElements',
        'dashboard_filters' => 'setDashboardFilters',
        'dashboard_layouts' => 'setDashboardLayouts',
        'deleted' => 'setDeleted',
        'deleted_at' => 'setDeletedAt',
        'deleter_id' => 'setDeleterId',
        'edit_uri' => 'setEditUri',
        'enable_viz_full_screen' => 'setEnableVizFullScreen',
        'favorite_count' => 'setFavoriteCount',
        'filters_bar_collapsed' => 'setFiltersBarCollapsed',
        'filters_location_top' => 'setFiltersLocationTop',
        'last_accessed_at' => 'setLastAccessedAt',
        'last_viewed_at' => 'setLastViewedAt',
        'updated_at' => 'setUpdatedAt',
        'last_updater_id' => 'setLastUpdaterId',
        'last_updater_name' => 'setLastUpdaterName',
        'user_name' => 'setUserName',
        'load_configuration' => 'setLoadConfiguration',
        'lookml_link_id' => 'setLookmlLinkId',
        'show_filters_bar' => 'setShowFiltersBar',
        'show_title' => 'setShowTitle',
        'folder_id' => 'setFolderId',
        'text_tile_text_color' => 'setTextTileTextColor',
        'tile_background_color' => 'setTileBackgroundColor',
        'tile_text_color' => 'setTileTextColor',
        'title_color' => 'setTitleColor',
        'view_count' => 'setViewCount',
        'appearance' => 'setAppearance',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'content_favorite_id' => 'getContentFavoriteId',
        'content_metadata_id' => 'getContentMetadataId',
        'description' => 'getDescription',
        'hidden' => 'getHidden',
        'id' => 'getId',
        'model' => 'getModel',
        'query_timezone' => 'getQueryTimezone',
        'readonly' => 'getReadonly',
        'refresh_interval' => 'getRefreshInterval',
        'refresh_interval_to_i' => 'getRefreshIntervalToI',
        'folder' => 'getFolder',
        'title' => 'getTitle',
        'user_id' => 'getUserId',
        'slug' => 'getSlug',
        'preferred_viewer' => 'getPreferredViewer',
        'alert_sync_with_dashboard_filter_enabled' => 'getAlertSyncWithDashboardFilterEnabled',
        'background_color' => 'getBackgroundColor',
        'created_at' => 'getCreatedAt',
        'crossfilter_enabled' => 'getCrossfilterEnabled',
        'dashboard_elements' => 'getDashboardElements',
        'dashboard_filters' => 'getDashboardFilters',
        'dashboard_layouts' => 'getDashboardLayouts',
        'deleted' => 'getDeleted',
        'deleted_at' => 'getDeletedAt',
        'deleter_id' => 'getDeleterId',
        'edit_uri' => 'getEditUri',
        'enable_viz_full_screen' => 'getEnableVizFullScreen',
        'favorite_count' => 'getFavoriteCount',
        'filters_bar_collapsed' => 'getFiltersBarCollapsed',
        'filters_location_top' => 'getFiltersLocationTop',
        'last_accessed_at' => 'getLastAccessedAt',
        'last_viewed_at' => 'getLastViewedAt',
        'updated_at' => 'getUpdatedAt',
        'last_updater_id' => 'getLastUpdaterId',
        'last_updater_name' => 'getLastUpdaterName',
        'user_name' => 'getUserName',
        'load_configuration' => 'getLoadConfiguration',
        'lookml_link_id' => 'getLookmlLinkId',
        'show_filters_bar' => 'getShowFiltersBar',
        'show_title' => 'getShowTitle',
        'folder_id' => 'getFolderId',
        'text_tile_text_color' => 'getTextTileTextColor',
        'tile_background_color' => 'getTileBackgroundColor',
        'tile_text_color' => 'getTileTextColor',
        'title_color' => 'getTitleColor',
        'view_count' => 'getViewCount',
        'appearance' => 'getAppearance',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
        $this->container['content_favorite_id'] = isset($data['content_favorite_id']) ? $data['content_favorite_id'] : null;
        $this->container['content_metadata_id'] = isset($data['content_metadata_id']) ? $data['content_metadata_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['query_timezone'] = isset($data['query_timezone']) ? $data['query_timezone'] : null;
        $this->container['readonly'] = isset($data['readonly']) ? $data['readonly'] : null;
        $this->container['refresh_interval'] = isset($data['refresh_interval']) ? $data['refresh_interval'] : null;
        $this->container['refresh_interval_to_i'] = isset($data['refresh_interval_to_i']) ? $data['refresh_interval_to_i'] : null;
        $this->container['folder'] = isset($data['folder']) ? $data['folder'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['preferred_viewer'] = isset($data['preferred_viewer']) ? $data['preferred_viewer'] : null;
        $this->container['alert_sync_with_dashboard_filter_enabled'] = isset($data['alert_sync_with_dashboard_filter_enabled']) ? $data['alert_sync_with_dashboard_filter_enabled'] : null;
        $this->container['background_color'] = isset($data['background_color']) ? $data['background_color'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['crossfilter_enabled'] = isset($data['crossfilter_enabled']) ? $data['crossfilter_enabled'] : null;
        $this->container['dashboard_elements'] = isset($data['dashboard_elements']) ? $data['dashboard_elements'] : null;
        $this->container['dashboard_filters'] = isset($data['dashboard_filters']) ? $data['dashboard_filters'] : null;
        $this->container['dashboard_layouts'] = isset($data['dashboard_layouts']) ? $data['dashboard_layouts'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['deleter_id'] = isset($data['deleter_id']) ? $data['deleter_id'] : null;
        $this->container['edit_uri'] = isset($data['edit_uri']) ? $data['edit_uri'] : null;
        $this->container['enable_viz_full_screen'] = isset($data['enable_viz_full_screen']) ? $data['enable_viz_full_screen'] : null;
        $this->container['favorite_count'] = isset($data['favorite_count']) ? $data['favorite_count'] : null;
        $this->container['filters_bar_collapsed'] = isset($data['filters_bar_collapsed']) ? $data['filters_bar_collapsed'] : null;
        $this->container['filters_location_top'] = isset($data['filters_location_top']) ? $data['filters_location_top'] : null;
        $this->container['last_accessed_at'] = isset($data['last_accessed_at']) ? $data['last_accessed_at'] : null;
        $this->container['last_viewed_at'] = isset($data['last_viewed_at']) ? $data['last_viewed_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['last_updater_id'] = isset($data['last_updater_id']) ? $data['last_updater_id'] : null;
        $this->container['last_updater_name'] = isset($data['last_updater_name']) ? $data['last_updater_name'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['load_configuration'] = isset($data['load_configuration']) ? $data['load_configuration'] : null;
        $this->container['lookml_link_id'] = isset($data['lookml_link_id']) ? $data['lookml_link_id'] : null;
        $this->container['show_filters_bar'] = isset($data['show_filters_bar']) ? $data['show_filters_bar'] : null;
        $this->container['show_title'] = isset($data['show_title']) ? $data['show_title'] : null;
        $this->container['folder_id'] = isset($data['folder_id']) ? $data['folder_id'] : null;
        $this->container['text_tile_text_color'] = isset($data['text_tile_text_color']) ? $data['text_tile_text_color'] : null;
        $this->container['tile_background_color'] = isset($data['tile_background_color']) ? $data['tile_background_color'] : null;
        $this->container['tile_text_color'] = isset($data['tile_text_color']) ? $data['tile_text_color'] : null;
        $this->container['title_color'] = isset($data['title_color']) ? $data['title_color'] : null;
        $this->container['view_count'] = isset($data['view_count']) ? $data['view_count'] : null;
        $this->container['appearance'] = isset($data['appearance']) ? $data['appearance'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets content_favorite_id
     *
     * @return string
     */
    public function getContentFavoriteId()
    {
        return $this->container['content_favorite_id'];
    }

    /**
     * Sets content_favorite_id
     *
     * @param string $content_favorite_id Content Favorite Id
     *
     * @return $this
     */
    public function setContentFavoriteId($content_favorite_id)
    {
        $this->container['content_favorite_id'] = $content_favorite_id;

        return $this;
    }

    /**
     * Gets content_metadata_id
     *
     * @return string
     */
    public function getContentMetadataId()
    {
        return $this->container['content_metadata_id'];
    }

    /**
     * Sets content_metadata_id
     *
     * @param string $content_metadata_id Id of content metadata
     *
     * @return $this
     */
    public function setContentMetadataId($content_metadata_id)
    {
        $this->container['content_metadata_id'] = $content_metadata_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden Is Hidden
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \Swagger\Client\Model\LookModel
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \Swagger\Client\Model\LookModel $model Model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets query_timezone
     *
     * @return string
     */
    public function getQueryTimezone()
    {
        return $this->container['query_timezone'];
    }

    /**
     * Sets query_timezone
     *
     * @param string $query_timezone Timezone in which the Dashboard will run by default.
     *
     * @return $this
     */
    public function setQueryTimezone($query_timezone)
    {
        $this->container['query_timezone'] = $query_timezone;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool $readonly Is Read-only
     *
     * @return $this
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets refresh_interval
     *
     * @return string
     */
    public function getRefreshInterval()
    {
        return $this->container['refresh_interval'];
    }

    /**
     * Sets refresh_interval
     *
     * @param string $refresh_interval Refresh Interval, as a time duration phrase like \"2 hours 30 minutes\". A number with no time units will be interpreted as whole seconds.
     *
     * @return $this
     */
    public function setRefreshInterval($refresh_interval)
    {
        $this->container['refresh_interval'] = $refresh_interval;

        return $this;
    }

    /**
     * Gets refresh_interval_to_i
     *
     * @return int
     */
    public function getRefreshIntervalToI()
    {
        return $this->container['refresh_interval_to_i'];
    }

    /**
     * Sets refresh_interval_to_i
     *
     * @param int $refresh_interval_to_i Refresh Interval in milliseconds
     *
     * @return $this
     */
    public function setRefreshIntervalToI($refresh_interval_to_i)
    {
        $this->container['refresh_interval_to_i'] = $refresh_interval_to_i;

        return $this;
    }

    /**
     * Gets folder
     *
     * @return \Swagger\Client\Model\FolderBase
     */
    public function getFolder()
    {
        return $this->container['folder'];
    }

    /**
     * Sets folder
     *
     * @param \Swagger\Client\Model\FolderBase $folder Folder
     *
     * @return $this
     */
    public function setFolder($folder)
    {
        $this->container['folder'] = $folder;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Dashboard Title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id Id of User
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug Content Metadata Slug
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets preferred_viewer
     *
     * @return string
     */
    public function getPreferredViewer()
    {
        return $this->container['preferred_viewer'];
    }

    /**
     * Sets preferred_viewer
     *
     * @param string $preferred_viewer The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)
     *
     * @return $this
     */
    public function setPreferredViewer($preferred_viewer)
    {
        $this->container['preferred_viewer'] = $preferred_viewer;

        return $this;
    }

    /**
     * Gets alert_sync_with_dashboard_filter_enabled
     *
     * @return bool
     */
    public function getAlertSyncWithDashboardFilterEnabled()
    {
        return $this->container['alert_sync_with_dashboard_filter_enabled'];
    }

    /**
     * Sets alert_sync_with_dashboard_filter_enabled
     *
     * @param bool $alert_sync_with_dashboard_filter_enabled Enables alerts to keep in sync with dashboard filter changes
     *
     * @return $this
     */
    public function setAlertSyncWithDashboardFilterEnabled($alert_sync_with_dashboard_filter_enabled)
    {
        $this->container['alert_sync_with_dashboard_filter_enabled'] = $alert_sync_with_dashboard_filter_enabled;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string $background_color Background color
     *
     * @return $this
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Time that the Dashboard was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets crossfilter_enabled
     *
     * @return bool
     */
    public function getCrossfilterEnabled()
    {
        return $this->container['crossfilter_enabled'];
    }

    /**
     * Sets crossfilter_enabled
     *
     * @param bool $crossfilter_enabled Enables crossfiltering in dashboards - only available in dashboards-next (beta)
     *
     * @return $this
     */
    public function setCrossfilterEnabled($crossfilter_enabled)
    {
        $this->container['crossfilter_enabled'] = $crossfilter_enabled;

        return $this;
    }

    /**
     * Gets dashboard_elements
     *
     * @return \Swagger\Client\Model\DashboardElement[]
     */
    public function getDashboardElements()
    {
        return $this->container['dashboard_elements'];
    }

    /**
     * Sets dashboard_elements
     *
     * @param \Swagger\Client\Model\DashboardElement[] $dashboard_elements Elements
     *
     * @return $this
     */
    public function setDashboardElements($dashboard_elements)
    {
        $this->container['dashboard_elements'] = $dashboard_elements;

        return $this;
    }

    /**
     * Gets dashboard_filters
     *
     * @return \Swagger\Client\Model\DashboardFilter[]
     */
    public function getDashboardFilters()
    {
        return $this->container['dashboard_filters'];
    }

    /**
     * Sets dashboard_filters
     *
     * @param \Swagger\Client\Model\DashboardFilter[] $dashboard_filters Filters
     *
     * @return $this
     */
    public function setDashboardFilters($dashboard_filters)
    {
        $this->container['dashboard_filters'] = $dashboard_filters;

        return $this;
    }

    /**
     * Gets dashboard_layouts
     *
     * @return \Swagger\Client\Model\DashboardLayout[]
     */
    public function getDashboardLayouts()
    {
        return $this->container['dashboard_layouts'];
    }

    /**
     * Sets dashboard_layouts
     *
     * @param \Swagger\Client\Model\DashboardLayout[] $dashboard_layouts Layouts
     *
     * @return $this
     */
    public function setDashboardLayouts($dashboard_layouts)
    {
        $this->container['dashboard_layouts'] = $dashboard_layouts;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Whether or not a dashboard is 'soft' deleted.
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at Time that the Dashboard was 'soft' deleted.
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets deleter_id
     *
     * @return string
     */
    public function getDeleterId()
    {
        return $this->container['deleter_id'];
    }

    /**
     * Sets deleter_id
     *
     * @param string $deleter_id Id of User that 'soft' deleted the dashboard.
     *
     * @return $this
     */
    public function setDeleterId($deleter_id)
    {
        $this->container['deleter_id'] = $deleter_id;

        return $this;
    }

    /**
     * Gets edit_uri
     *
     * @return string
     */
    public function getEditUri()
    {
        return $this->container['edit_uri'];
    }

    /**
     * Sets edit_uri
     *
     * @param string $edit_uri Relative path of URI of LookML file to edit the dashboard (LookML dashboard only).
     *
     * @return $this
     */
    public function setEditUri($edit_uri)
    {
        $this->container['edit_uri'] = $edit_uri;

        return $this;
    }

    /**
     * Gets enable_viz_full_screen
     *
     * @return bool
     */
    public function getEnableVizFullScreen()
    {
        return $this->container['enable_viz_full_screen'];
    }

    /**
     * Sets enable_viz_full_screen
     *
     * @param bool $enable_viz_full_screen Allow visualizations to be viewed in full screen mode
     *
     * @return $this
     */
    public function setEnableVizFullScreen($enable_viz_full_screen)
    {
        $this->container['enable_viz_full_screen'] = $enable_viz_full_screen;

        return $this;
    }

    /**
     * Gets favorite_count
     *
     * @return int
     */
    public function getFavoriteCount()
    {
        return $this->container['favorite_count'];
    }

    /**
     * Sets favorite_count
     *
     * @param int $favorite_count Number of times favorited
     *
     * @return $this
     */
    public function setFavoriteCount($favorite_count)
    {
        $this->container['favorite_count'] = $favorite_count;

        return $this;
    }

    /**
     * Gets filters_bar_collapsed
     *
     * @return bool
     */
    public function getFiltersBarCollapsed()
    {
        return $this->container['filters_bar_collapsed'];
    }

    /**
     * Sets filters_bar_collapsed
     *
     * @param bool $filters_bar_collapsed Sets the default state of the filters bar to collapsed or open
     *
     * @return $this
     */
    public function setFiltersBarCollapsed($filters_bar_collapsed)
    {
        $this->container['filters_bar_collapsed'] = $filters_bar_collapsed;

        return $this;
    }

    /**
     * Gets filters_location_top
     *
     * @return bool
     */
    public function getFiltersLocationTop()
    {
        return $this->container['filters_location_top'];
    }

    /**
     * Sets filters_location_top
     *
     * @param bool $filters_location_top Sets the default state of the filters location to top(true) or right(false)
     *
     * @return $this
     */
    public function setFiltersLocationTop($filters_location_top)
    {
        $this->container['filters_location_top'] = $filters_location_top;

        return $this;
    }

    /**
     * Gets last_accessed_at
     *
     * @return \DateTime
     */
    public function getLastAccessedAt()
    {
        return $this->container['last_accessed_at'];
    }

    /**
     * Sets last_accessed_at
     *
     * @param \DateTime $last_accessed_at Time the dashboard was last accessed
     *
     * @return $this
     */
    public function setLastAccessedAt($last_accessed_at)
    {
        $this->container['last_accessed_at'] = $last_accessed_at;

        return $this;
    }

    /**
     * Gets last_viewed_at
     *
     * @return \DateTime
     */
    public function getLastViewedAt()
    {
        return $this->container['last_viewed_at'];
    }

    /**
     * Sets last_viewed_at
     *
     * @param \DateTime $last_viewed_at Time last viewed in the Looker web UI
     *
     * @return $this
     */
    public function setLastViewedAt($last_viewed_at)
    {
        $this->container['last_viewed_at'] = $last_viewed_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Time that the Dashboard was most recently updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets last_updater_id
     *
     * @return string
     */
    public function getLastUpdaterId()
    {
        return $this->container['last_updater_id'];
    }

    /**
     * Sets last_updater_id
     *
     * @param string $last_updater_id Id of User that most recently updated the dashboard.
     *
     * @return $this
     */
    public function setLastUpdaterId($last_updater_id)
    {
        $this->container['last_updater_id'] = $last_updater_id;

        return $this;
    }

    /**
     * Gets last_updater_name
     *
     * @return string
     */
    public function getLastUpdaterName()
    {
        return $this->container['last_updater_name'];
    }

    /**
     * Sets last_updater_name
     *
     * @param string $last_updater_name Name of User that most recently updated the dashboard.
     *
     * @return $this
     */
    public function setLastUpdaterName($last_updater_name)
    {
        $this->container['last_updater_name'] = $last_updater_name;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name Name of User that created the dashboard.
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets load_configuration
     *
     * @return string
     */
    public function getLoadConfiguration()
    {
        return $this->container['load_configuration'];
    }

    /**
     * Sets load_configuration
     *
     * @param string $load_configuration configuration option that governs how dashboard loading will happen.
     *
     * @return $this
     */
    public function setLoadConfiguration($load_configuration)
    {
        $this->container['load_configuration'] = $load_configuration;

        return $this;
    }

    /**
     * Gets lookml_link_id
     *
     * @return string
     */
    public function getLookmlLinkId()
    {
        return $this->container['lookml_link_id'];
    }

    /**
     * Sets lookml_link_id
     *
     * @param string $lookml_link_id Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match.
     *
     * @return $this
     */
    public function setLookmlLinkId($lookml_link_id)
    {
        $this->container['lookml_link_id'] = $lookml_link_id;

        return $this;
    }

    /**
     * Gets show_filters_bar
     *
     * @return bool
     */
    public function getShowFiltersBar()
    {
        return $this->container['show_filters_bar'];
    }

    /**
     * Sets show_filters_bar
     *
     * @param bool $show_filters_bar Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://cloud.google.com/looker/docs/r/api/control-access)
     *
     * @return $this
     */
    public function setShowFiltersBar($show_filters_bar)
    {
        $this->container['show_filters_bar'] = $show_filters_bar;

        return $this;
    }

    /**
     * Gets show_title
     *
     * @return bool
     */
    public function getShowTitle()
    {
        return $this->container['show_title'];
    }

    /**
     * Sets show_title
     *
     * @param bool $show_title Show title
     *
     * @return $this
     */
    public function setShowTitle($show_title)
    {
        $this->container['show_title'] = $show_title;

        return $this;
    }

    /**
     * Gets folder_id
     *
     * @return string
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     *
     * @param string $folder_id Id of folder
     *
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets text_tile_text_color
     *
     * @return string
     */
    public function getTextTileTextColor()
    {
        return $this->container['text_tile_text_color'];
    }

    /**
     * Sets text_tile_text_color
     *
     * @param string $text_tile_text_color Color of text on text tiles
     *
     * @return $this
     */
    public function setTextTileTextColor($text_tile_text_color)
    {
        $this->container['text_tile_text_color'] = $text_tile_text_color;

        return $this;
    }

    /**
     * Gets tile_background_color
     *
     * @return string
     */
    public function getTileBackgroundColor()
    {
        return $this->container['tile_background_color'];
    }

    /**
     * Sets tile_background_color
     *
     * @param string $tile_background_color Tile background color
     *
     * @return $this
     */
    public function setTileBackgroundColor($tile_background_color)
    {
        $this->container['tile_background_color'] = $tile_background_color;

        return $this;
    }

    /**
     * Gets tile_text_color
     *
     * @return string
     */
    public function getTileTextColor()
    {
        return $this->container['tile_text_color'];
    }

    /**
     * Sets tile_text_color
     *
     * @param string $tile_text_color Tile text color
     *
     * @return $this
     */
    public function setTileTextColor($tile_text_color)
    {
        $this->container['tile_text_color'] = $tile_text_color;

        return $this;
    }

    /**
     * Gets title_color
     *
     * @return string
     */
    public function getTitleColor()
    {
        return $this->container['title_color'];
    }

    /**
     * Sets title_color
     *
     * @param string $title_color Title color
     *
     * @return $this
     */
    public function setTitleColor($title_color)
    {
        $this->container['title_color'] = $title_color;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return int
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param int $view_count Number of times viewed in the Looker web UI
     *
     * @return $this
     */
    public function setViewCount($view_count)
    {
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets appearance
     *
     * @return \Swagger\Client\Model\DashboardAppearance
     */
    public function getAppearance()
    {
        return $this->container['appearance'];
    }

    /**
     * Sets appearance
     *
     * @param \Swagger\Client\Model\DashboardAppearance $appearance Dashboard visual settings only applicable to dashboards-next (beta)
     *
     * @return $this
     */
    public function setAppearance($appearance)
    {
        $this->container['appearance'] = $appearance;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Relative URL of the dashboard
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


