<?php
/**
 * SchemaColumn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SchemaColumn Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SchemaColumn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SchemaColumn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'sql_escaped_name' => 'string',
        'schema_name' => 'string',
        'data_type_database' => 'string',
        'data_type' => 'string',
        'data_type_looker' => 'string',
        'description' => 'string',
        'column_size' => 'int',
        'snippets' => '\Swagger\Client\Model\Snippet[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'sql_escaped_name' => null,
        'schema_name' => null,
        'data_type_database' => null,
        'data_type' => null,
        'data_type_looker' => null,
        'description' => null,
        'column_size' => 'int64',
        'snippets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'sql_escaped_name' => 'sql_escaped_name',
        'schema_name' => 'schema_name',
        'data_type_database' => 'data_type_database',
        'data_type' => 'data_type',
        'data_type_looker' => 'data_type_looker',
        'description' => 'description',
        'column_size' => 'column_size',
        'snippets' => 'snippets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'sql_escaped_name' => 'setSqlEscapedName',
        'schema_name' => 'setSchemaName',
        'data_type_database' => 'setDataTypeDatabase',
        'data_type' => 'setDataType',
        'data_type_looker' => 'setDataTypeLooker',
        'description' => 'setDescription',
        'column_size' => 'setColumnSize',
        'snippets' => 'setSnippets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'sql_escaped_name' => 'getSqlEscapedName',
        'schema_name' => 'getSchemaName',
        'data_type_database' => 'getDataTypeDatabase',
        'data_type' => 'getDataType',
        'data_type_looker' => 'getDataTypeLooker',
        'description' => 'getDescription',
        'column_size' => 'getColumnSize',
        'snippets' => 'getSnippets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['sql_escaped_name'] = isset($data['sql_escaped_name']) ? $data['sql_escaped_name'] : null;
        $this->container['schema_name'] = isset($data['schema_name']) ? $data['schema_name'] : null;
        $this->container['data_type_database'] = isset($data['data_type_database']) ? $data['data_type_database'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['data_type_looker'] = isset($data['data_type_looker']) ? $data['data_type_looker'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['column_size'] = isset($data['column_size']) ? $data['column_size'] : null;
        $this->container['snippets'] = isset($data['snippets']) ? $data['snippets'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Schema item name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sql_escaped_name
     *
     * @return string
     */
    public function getSqlEscapedName()
    {
        return $this->container['sql_escaped_name'];
    }

    /**
     * Sets sql_escaped_name
     *
     * @param string $sql_escaped_name Full name of item
     *
     * @return $this
     */
    public function setSqlEscapedName($sql_escaped_name)
    {
        $this->container['sql_escaped_name'] = $sql_escaped_name;

        return $this;
    }

    /**
     * Gets schema_name
     *
     * @return string
     */
    public function getSchemaName()
    {
        return $this->container['schema_name'];
    }

    /**
     * Sets schema_name
     *
     * @param string $schema_name Name of schema
     *
     * @return $this
     */
    public function setSchemaName($schema_name)
    {
        $this->container['schema_name'] = $schema_name;

        return $this;
    }

    /**
     * Gets data_type_database
     *
     * @return string
     */
    public function getDataTypeDatabase()
    {
        return $this->container['data_type_database'];
    }

    /**
     * Sets data_type_database
     *
     * @param string $data_type_database SQL dialect data type
     *
     * @return $this
     */
    public function setDataTypeDatabase($data_type_database)
    {
        $this->container['data_type_database'] = $data_type_database;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type Data type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets data_type_looker
     *
     * @return string
     */
    public function getDataTypeLooker()
    {
        return $this->container['data_type_looker'];
    }

    /**
     * Sets data_type_looker
     *
     * @param string $data_type_looker Looker data type
     *
     * @return $this
     */
    public function setDataTypeLooker($data_type_looker)
    {
        $this->container['data_type_looker'] = $data_type_looker;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description SQL data type
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets column_size
     *
     * @return int
     */
    public function getColumnSize()
    {
        return $this->container['column_size'];
    }

    /**
     * Sets column_size
     *
     * @param int $column_size Column data size
     *
     * @return $this
     */
    public function setColumnSize($column_size)
    {
        $this->container['column_size'] = $column_size;

        return $this;
    }

    /**
     * Gets snippets
     *
     * @return \Swagger\Client\Model\Snippet[]
     */
    public function getSnippets()
    {
        return $this->container['snippets'];
    }

    /**
     * Sets snippets
     *
     * @param \Swagger\Client\Model\Snippet[] $snippets SQL Runner snippets for this connection
     *
     * @return $this
     */
    public function setSnippets($snippets)
    {
        $this->container['snippets'] = $snippets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


