<?php
/**
 * HomepageSection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HomepageSection Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HomepageSection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HomepageSection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can' => 'map[string,bool]',
        'created_at' => '\DateTime',
        'deleted_at' => '\DateTime',
        'detail_url' => 'string',
        'homepage_id' => 'string',
        'homepage_items' => '\Swagger\Client\Model\HomepageItem[]',
        'id' => 'string',
        'is_header' => 'bool',
        'item_order' => 'string[]',
        'title' => 'string',
        'updated_at' => '\DateTime',
        'description' => 'string',
        'visible_item_order' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'can' => null,
        'created_at' => 'date-time',
        'deleted_at' => 'date-time',
        'detail_url' => null,
        'homepage_id' => null,
        'homepage_items' => null,
        'id' => null,
        'is_header' => null,
        'item_order' => null,
        'title' => null,
        'updated_at' => 'date-time',
        'description' => null,
        'visible_item_order' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'created_at' => 'created_at',
        'deleted_at' => 'deleted_at',
        'detail_url' => 'detail_url',
        'homepage_id' => 'homepage_id',
        'homepage_items' => 'homepage_items',
        'id' => 'id',
        'is_header' => 'is_header',
        'item_order' => 'item_order',
        'title' => 'title',
        'updated_at' => 'updated_at',
        'description' => 'description',
        'visible_item_order' => 'visible_item_order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'created_at' => 'setCreatedAt',
        'deleted_at' => 'setDeletedAt',
        'detail_url' => 'setDetailUrl',
        'homepage_id' => 'setHomepageId',
        'homepage_items' => 'setHomepageItems',
        'id' => 'setId',
        'is_header' => 'setIsHeader',
        'item_order' => 'setItemOrder',
        'title' => 'setTitle',
        'updated_at' => 'setUpdatedAt',
        'description' => 'setDescription',
        'visible_item_order' => 'setVisibleItemOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'created_at' => 'getCreatedAt',
        'deleted_at' => 'getDeletedAt',
        'detail_url' => 'getDetailUrl',
        'homepage_id' => 'getHomepageId',
        'homepage_items' => 'getHomepageItems',
        'id' => 'getId',
        'is_header' => 'getIsHeader',
        'item_order' => 'getItemOrder',
        'title' => 'getTitle',
        'updated_at' => 'getUpdatedAt',
        'description' => 'getDescription',
        'visible_item_order' => 'getVisibleItemOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['detail_url'] = isset($data['detail_url']) ? $data['detail_url'] : null;
        $this->container['homepage_id'] = isset($data['homepage_id']) ? $data['homepage_id'] : null;
        $this->container['homepage_items'] = isset($data['homepage_items']) ? $data['homepage_items'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_header'] = isset($data['is_header']) ? $data['is_header'] : null;
        $this->container['item_order'] = isset($data['item_order']) ? $data['item_order'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['visible_item_order'] = isset($data['visible_item_order']) ? $data['visible_item_order'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Time at which this section was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at Time at which this section was deleted.
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets detail_url
     *
     * @return string
     */
    public function getDetailUrl()
    {
        return $this->container['detail_url'];
    }

    /**
     * Sets detail_url
     *
     * @param string $detail_url A URL pointing to a page showing further information about the content in the section.
     *
     * @return $this
     */
    public function setDetailUrl($detail_url)
    {
        $this->container['detail_url'] = $detail_url;

        return $this;
    }

    /**
     * Gets homepage_id
     *
     * @return string
     */
    public function getHomepageId()
    {
        return $this->container['homepage_id'];
    }

    /**
     * Sets homepage_id
     *
     * @param string $homepage_id Id reference to parent homepage
     *
     * @return $this
     */
    public function setHomepageId($homepage_id)
    {
        $this->container['homepage_id'] = $homepage_id;

        return $this;
    }

    /**
     * Gets homepage_items
     *
     * @return \Swagger\Client\Model\HomepageItem[]
     */
    public function getHomepageItems()
    {
        return $this->container['homepage_items'];
    }

    /**
     * Sets homepage_items
     *
     * @param \Swagger\Client\Model\HomepageItem[] $homepage_items Items in the homepage section
     *
     * @return $this
     */
    public function setHomepageItems($homepage_items)
    {
        $this->container['homepage_items'] = $homepage_items;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_header
     *
     * @return bool
     */
    public function getIsHeader()
    {
        return $this->container['is_header'];
    }

    /**
     * Sets is_header
     *
     * @param bool $is_header Is this a header section (has no items)
     *
     * @return $this
     */
    public function setIsHeader($is_header)
    {
        $this->container['is_header'] = $is_header;

        return $this;
    }

    /**
     * Gets item_order
     *
     * @return string[]
     */
    public function getItemOrder()
    {
        return $this->container['item_order'];
    }

    /**
     * Sets item_order
     *
     * @param string[] $item_order ids of the homepage items in the order they should be displayed
     *
     * @return $this
     */
    public function setItemOrder($item_order)
    {
        $this->container['item_order'] = $item_order;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Name of row
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Time at which this section was last updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the content found in this section.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets visible_item_order
     *
     * @return string[]
     */
    public function getVisibleItemOrder()
    {
        return $this->container['visible_item_order'];
    }

    /**
     * Sets visible_item_order
     *
     * @param string[] $visible_item_order ids of the homepage items the user can see in the order they should be displayed
     *
     * @return $this
     */
    public function setVisibleItemOrder($visible_item_order)
    {
        $this->container['visible_item_order'] = $visible_item_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


