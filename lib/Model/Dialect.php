<?php
/**
 * Dialect
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Dialect Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Dialect implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Dialect';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'label' => 'string',
        'supports_cost_estimate' => 'bool',
        'cost_estimate_style' => 'string',
        'persistent_table_indexes' => 'string',
        'persistent_table_sortkeys' => 'string',
        'persistent_table_distkey' => 'string',
        'supports_streaming' => 'bool',
        'automatically_run_sql_runner_snippets' => 'bool',
        'connection_tests' => 'string[]',
        'supports_inducer' => 'bool',
        'supports_multiple_databases' => 'bool',
        'supports_persistent_derived_tables' => 'bool',
        'has_ssl_support' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'label' => null,
        'supports_cost_estimate' => null,
        'cost_estimate_style' => null,
        'persistent_table_indexes' => null,
        'persistent_table_sortkeys' => null,
        'persistent_table_distkey' => null,
        'supports_streaming' => null,
        'automatically_run_sql_runner_snippets' => null,
        'connection_tests' => null,
        'supports_inducer' => null,
        'supports_multiple_databases' => null,
        'supports_persistent_derived_tables' => null,
        'has_ssl_support' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'label' => 'label',
        'supports_cost_estimate' => 'supports_cost_estimate',
        'cost_estimate_style' => 'cost_estimate_style',
        'persistent_table_indexes' => 'persistent_table_indexes',
        'persistent_table_sortkeys' => 'persistent_table_sortkeys',
        'persistent_table_distkey' => 'persistent_table_distkey',
        'supports_streaming' => 'supports_streaming',
        'automatically_run_sql_runner_snippets' => 'automatically_run_sql_runner_snippets',
        'connection_tests' => 'connection_tests',
        'supports_inducer' => 'supports_inducer',
        'supports_multiple_databases' => 'supports_multiple_databases',
        'supports_persistent_derived_tables' => 'supports_persistent_derived_tables',
        'has_ssl_support' => 'has_ssl_support'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'label' => 'setLabel',
        'supports_cost_estimate' => 'setSupportsCostEstimate',
        'cost_estimate_style' => 'setCostEstimateStyle',
        'persistent_table_indexes' => 'setPersistentTableIndexes',
        'persistent_table_sortkeys' => 'setPersistentTableSortkeys',
        'persistent_table_distkey' => 'setPersistentTableDistkey',
        'supports_streaming' => 'setSupportsStreaming',
        'automatically_run_sql_runner_snippets' => 'setAutomaticallyRunSqlRunnerSnippets',
        'connection_tests' => 'setConnectionTests',
        'supports_inducer' => 'setSupportsInducer',
        'supports_multiple_databases' => 'setSupportsMultipleDatabases',
        'supports_persistent_derived_tables' => 'setSupportsPersistentDerivedTables',
        'has_ssl_support' => 'setHasSslSupport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'label' => 'getLabel',
        'supports_cost_estimate' => 'getSupportsCostEstimate',
        'cost_estimate_style' => 'getCostEstimateStyle',
        'persistent_table_indexes' => 'getPersistentTableIndexes',
        'persistent_table_sortkeys' => 'getPersistentTableSortkeys',
        'persistent_table_distkey' => 'getPersistentTableDistkey',
        'supports_streaming' => 'getSupportsStreaming',
        'automatically_run_sql_runner_snippets' => 'getAutomaticallyRunSqlRunnerSnippets',
        'connection_tests' => 'getConnectionTests',
        'supports_inducer' => 'getSupportsInducer',
        'supports_multiple_databases' => 'getSupportsMultipleDatabases',
        'supports_persistent_derived_tables' => 'getSupportsPersistentDerivedTables',
        'has_ssl_support' => 'getHasSslSupport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['supports_cost_estimate'] = isset($data['supports_cost_estimate']) ? $data['supports_cost_estimate'] : null;
        $this->container['cost_estimate_style'] = isset($data['cost_estimate_style']) ? $data['cost_estimate_style'] : null;
        $this->container['persistent_table_indexes'] = isset($data['persistent_table_indexes']) ? $data['persistent_table_indexes'] : null;
        $this->container['persistent_table_sortkeys'] = isset($data['persistent_table_sortkeys']) ? $data['persistent_table_sortkeys'] : null;
        $this->container['persistent_table_distkey'] = isset($data['persistent_table_distkey']) ? $data['persistent_table_distkey'] : null;
        $this->container['supports_streaming'] = isset($data['supports_streaming']) ? $data['supports_streaming'] : null;
        $this->container['automatically_run_sql_runner_snippets'] = isset($data['automatically_run_sql_runner_snippets']) ? $data['automatically_run_sql_runner_snippets'] : null;
        $this->container['connection_tests'] = isset($data['connection_tests']) ? $data['connection_tests'] : null;
        $this->container['supports_inducer'] = isset($data['supports_inducer']) ? $data['supports_inducer'] : null;
        $this->container['supports_multiple_databases'] = isset($data['supports_multiple_databases']) ? $data['supports_multiple_databases'] : null;
        $this->container['supports_persistent_derived_tables'] = isset($data['supports_persistent_derived_tables']) ? $data['supports_persistent_derived_tables'] : null;
        $this->container['has_ssl_support'] = isset($data['has_ssl_support']) ? $data['has_ssl_support'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the dialect
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label The human-readable label of the connection
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets supports_cost_estimate
     *
     * @return bool
     */
    public function getSupportsCostEstimate()
    {
        return $this->container['supports_cost_estimate'];
    }

    /**
     * Sets supports_cost_estimate
     *
     * @param bool $supports_cost_estimate Whether the dialect supports query cost estimates
     *
     * @return $this
     */
    public function setSupportsCostEstimate($supports_cost_estimate)
    {
        $this->container['supports_cost_estimate'] = $supports_cost_estimate;

        return $this;
    }

    /**
     * Gets cost_estimate_style
     *
     * @return string
     */
    public function getCostEstimateStyle()
    {
        return $this->container['cost_estimate_style'];
    }

    /**
     * Sets cost_estimate_style
     *
     * @param string $cost_estimate_style How the dialect handles cost estimation
     *
     * @return $this
     */
    public function setCostEstimateStyle($cost_estimate_style)
    {
        $this->container['cost_estimate_style'] = $cost_estimate_style;

        return $this;
    }

    /**
     * Gets persistent_table_indexes
     *
     * @return string
     */
    public function getPersistentTableIndexes()
    {
        return $this->container['persistent_table_indexes'];
    }

    /**
     * Sets persistent_table_indexes
     *
     * @param string $persistent_table_indexes PDT index columns
     *
     * @return $this
     */
    public function setPersistentTableIndexes($persistent_table_indexes)
    {
        $this->container['persistent_table_indexes'] = $persistent_table_indexes;

        return $this;
    }

    /**
     * Gets persistent_table_sortkeys
     *
     * @return string
     */
    public function getPersistentTableSortkeys()
    {
        return $this->container['persistent_table_sortkeys'];
    }

    /**
     * Sets persistent_table_sortkeys
     *
     * @param string $persistent_table_sortkeys PDT sortkey columns
     *
     * @return $this
     */
    public function setPersistentTableSortkeys($persistent_table_sortkeys)
    {
        $this->container['persistent_table_sortkeys'] = $persistent_table_sortkeys;

        return $this;
    }

    /**
     * Gets persistent_table_distkey
     *
     * @return string
     */
    public function getPersistentTableDistkey()
    {
        return $this->container['persistent_table_distkey'];
    }

    /**
     * Sets persistent_table_distkey
     *
     * @param string $persistent_table_distkey PDT distkey column
     *
     * @return $this
     */
    public function setPersistentTableDistkey($persistent_table_distkey)
    {
        $this->container['persistent_table_distkey'] = $persistent_table_distkey;

        return $this;
    }

    /**
     * Gets supports_streaming
     *
     * @return bool
     */
    public function getSupportsStreaming()
    {
        return $this->container['supports_streaming'];
    }

    /**
     * Sets supports_streaming
     *
     * @param bool $supports_streaming Suports streaming results
     *
     * @return $this
     */
    public function setSupportsStreaming($supports_streaming)
    {
        $this->container['supports_streaming'] = $supports_streaming;

        return $this;
    }

    /**
     * Gets automatically_run_sql_runner_snippets
     *
     * @return bool
     */
    public function getAutomaticallyRunSqlRunnerSnippets()
    {
        return $this->container['automatically_run_sql_runner_snippets'];
    }

    /**
     * Sets automatically_run_sql_runner_snippets
     *
     * @param bool $automatically_run_sql_runner_snippets Should SQL Runner snippets automatically be run
     *
     * @return $this
     */
    public function setAutomaticallyRunSqlRunnerSnippets($automatically_run_sql_runner_snippets)
    {
        $this->container['automatically_run_sql_runner_snippets'] = $automatically_run_sql_runner_snippets;

        return $this;
    }

    /**
     * Gets connection_tests
     *
     * @return string[]
     */
    public function getConnectionTests()
    {
        return $this->container['connection_tests'];
    }

    /**
     * Sets connection_tests
     *
     * @param string[] $connection_tests Array of names of the tests that can be run on a connection using this dialect
     *
     * @return $this
     */
    public function setConnectionTests($connection_tests)
    {
        $this->container['connection_tests'] = $connection_tests;

        return $this;
    }

    /**
     * Gets supports_inducer
     *
     * @return bool
     */
    public function getSupportsInducer()
    {
        return $this->container['supports_inducer'];
    }

    /**
     * Sets supports_inducer
     *
     * @param bool $supports_inducer Is supported with the inducer (i.e. generate from sql)
     *
     * @return $this
     */
    public function setSupportsInducer($supports_inducer)
    {
        $this->container['supports_inducer'] = $supports_inducer;

        return $this;
    }

    /**
     * Gets supports_multiple_databases
     *
     * @return bool
     */
    public function getSupportsMultipleDatabases()
    {
        return $this->container['supports_multiple_databases'];
    }

    /**
     * Sets supports_multiple_databases
     *
     * @param bool $supports_multiple_databases Can multiple databases be accessed from a connection using this dialect
     *
     * @return $this
     */
    public function setSupportsMultipleDatabases($supports_multiple_databases)
    {
        $this->container['supports_multiple_databases'] = $supports_multiple_databases;

        return $this;
    }

    /**
     * Gets supports_persistent_derived_tables
     *
     * @return bool
     */
    public function getSupportsPersistentDerivedTables()
    {
        return $this->container['supports_persistent_derived_tables'];
    }

    /**
     * Sets supports_persistent_derived_tables
     *
     * @param bool $supports_persistent_derived_tables Whether the dialect supports allowing Looker to build persistent derived tables
     *
     * @return $this
     */
    public function setSupportsPersistentDerivedTables($supports_persistent_derived_tables)
    {
        $this->container['supports_persistent_derived_tables'] = $supports_persistent_derived_tables;

        return $this;
    }

    /**
     * Gets has_ssl_support
     *
     * @return bool
     */
    public function getHasSslSupport()
    {
        return $this->container['has_ssl_support'];
    }

    /**
     * Sets has_ssl_support
     *
     * @param bool $has_ssl_support Does the database have client SSL support settable through the JDBC string explicitly?
     *
     * @return $this
     */
    public function setHasSslSupport($has_ssl_support)
    {
        $this->container['has_ssl_support'] = $has_ssl_support;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


