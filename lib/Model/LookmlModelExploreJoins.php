<?php
/**
 * LookmlModelExploreJoins
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LookmlModelExploreJoins Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LookmlModelExploreJoins implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LookmlModelExploreJoins';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'dependent_fields' => 'string[]',
        'fields' => 'string[]',
        'foreign_key' => 'string',
        'from' => 'string',
        'outer_only' => 'bool',
        'relationship' => 'string',
        'required_joins' => 'string[]',
        'sql_foreign_key' => 'string',
        'sql_on' => 'string',
        'sql_table_name' => 'string',
        'type' => 'string',
        'view_label' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'dependent_fields' => null,
        'fields' => null,
        'foreign_key' => null,
        'from' => null,
        'outer_only' => null,
        'relationship' => null,
        'required_joins' => null,
        'sql_foreign_key' => null,
        'sql_on' => null,
        'sql_table_name' => null,
        'type' => null,
        'view_label' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'dependent_fields' => 'dependent_fields',
        'fields' => 'fields',
        'foreign_key' => 'foreign_key',
        'from' => 'from',
        'outer_only' => 'outer_only',
        'relationship' => 'relationship',
        'required_joins' => 'required_joins',
        'sql_foreign_key' => 'sql_foreign_key',
        'sql_on' => 'sql_on',
        'sql_table_name' => 'sql_table_name',
        'type' => 'type',
        'view_label' => 'view_label'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'dependent_fields' => 'setDependentFields',
        'fields' => 'setFields',
        'foreign_key' => 'setForeignKey',
        'from' => 'setFrom',
        'outer_only' => 'setOuterOnly',
        'relationship' => 'setRelationship',
        'required_joins' => 'setRequiredJoins',
        'sql_foreign_key' => 'setSqlForeignKey',
        'sql_on' => 'setSqlOn',
        'sql_table_name' => 'setSqlTableName',
        'type' => 'setType',
        'view_label' => 'setViewLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'dependent_fields' => 'getDependentFields',
        'fields' => 'getFields',
        'foreign_key' => 'getForeignKey',
        'from' => 'getFrom',
        'outer_only' => 'getOuterOnly',
        'relationship' => 'getRelationship',
        'required_joins' => 'getRequiredJoins',
        'sql_foreign_key' => 'getSqlForeignKey',
        'sql_on' => 'getSqlOn',
        'sql_table_name' => 'getSqlTableName',
        'type' => 'getType',
        'view_label' => 'getViewLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['dependent_fields'] = isset($data['dependent_fields']) ? $data['dependent_fields'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['foreign_key'] = isset($data['foreign_key']) ? $data['foreign_key'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['outer_only'] = isset($data['outer_only']) ? $data['outer_only'] : null;
        $this->container['relationship'] = isset($data['relationship']) ? $data['relationship'] : null;
        $this->container['required_joins'] = isset($data['required_joins']) ? $data['required_joins'] : null;
        $this->container['sql_foreign_key'] = isset($data['sql_foreign_key']) ? $data['sql_foreign_key'] : null;
        $this->container['sql_on'] = isset($data['sql_on']) ? $data['sql_on'] : null;
        $this->container['sql_table_name'] = isset($data['sql_table_name']) ? $data['sql_table_name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['view_label'] = isset($data['view_label']) ? $data['view_label'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of this join (and name of the view to join)
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets dependent_fields
     *
     * @return string[]
     */
    public function getDependentFields()
    {
        return $this->container['dependent_fields'];
    }

    /**
     * Sets dependent_fields
     *
     * @param string[] $dependent_fields Fields referenced by the join
     *
     * @return $this
     */
    public function setDependentFields($dependent_fields)
    {
        $this->container['dependent_fields'] = $dependent_fields;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string[] $fields Fields of the joined view to pull into this explore
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets foreign_key
     *
     * @return string
     */
    public function getForeignKey()
    {
        return $this->container['foreign_key'];
    }

    /**
     * Sets foreign_key
     *
     * @param string $foreign_key Name of the dimension in this explore whose value is in the primary key of the joined view
     *
     * @return $this
     */
    public function setForeignKey($foreign_key)
    {
        $this->container['foreign_key'] = $foreign_key;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from Name of view to join
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets outer_only
     *
     * @return bool
     */
    public function getOuterOnly()
    {
        return $this->container['outer_only'];
    }

    /**
     * Sets outer_only
     *
     * @param bool $outer_only Specifies whether all queries must use an outer join
     *
     * @return $this
     */
    public function setOuterOnly($outer_only)
    {
        $this->container['outer_only'] = $outer_only;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return string
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param string $relationship many_to_one, one_to_one, one_to_many, many_to_many
     *
     * @return $this
     */
    public function setRelationship($relationship)
    {
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets required_joins
     *
     * @return string[]
     */
    public function getRequiredJoins()
    {
        return $this->container['required_joins'];
    }

    /**
     * Sets required_joins
     *
     * @param string[] $required_joins Names of joins that must always be included in SQL queries
     *
     * @return $this
     */
    public function setRequiredJoins($required_joins)
    {
        $this->container['required_joins'] = $required_joins;

        return $this;
    }

    /**
     * Gets sql_foreign_key
     *
     * @return string
     */
    public function getSqlForeignKey()
    {
        return $this->container['sql_foreign_key'];
    }

    /**
     * Sets sql_foreign_key
     *
     * @param string $sql_foreign_key SQL expression that produces a foreign key
     *
     * @return $this
     */
    public function setSqlForeignKey($sql_foreign_key)
    {
        $this->container['sql_foreign_key'] = $sql_foreign_key;

        return $this;
    }

    /**
     * Gets sql_on
     *
     * @return string
     */
    public function getSqlOn()
    {
        return $this->container['sql_on'];
    }

    /**
     * Sets sql_on
     *
     * @param string $sql_on SQL ON expression describing the join condition
     *
     * @return $this
     */
    public function setSqlOn($sql_on)
    {
        $this->container['sql_on'] = $sql_on;

        return $this;
    }

    /**
     * Gets sql_table_name
     *
     * @return string
     */
    public function getSqlTableName()
    {
        return $this->container['sql_table_name'];
    }

    /**
     * Sets sql_table_name
     *
     * @param string $sql_table_name SQL table name to join
     *
     * @return $this
     */
    public function setSqlTableName($sql_table_name)
    {
        $this->container['sql_table_name'] = $sql_table_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The join type: left_outer, full_outer, inner, or cross
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets view_label
     *
     * @return string
     */
    public function getViewLabel()
    {
        return $this->container['view_label'];
    }

    /**
     * Sets view_label
     *
     * @param string $view_label Label to display in UI selectors
     *
     * @return $this
     */
    public function setViewLabel($view_label)
    {
        $this->container['view_label'] = $view_label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


