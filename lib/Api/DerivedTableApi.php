<?php
/**
 * DerivedTableApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DerivedTableApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DerivedTableApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkPdtBuild
     *
     * Check status of a PDT materialization
     *
     * @param  string $materialization_id The materialization id to check status for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MaterializePDT
     */
    public function checkPdtBuild($materialization_id)
    {
        list($response) = $this->checkPdtBuildWithHttpInfo($materialization_id);
        return $response;
    }

    /**
     * Operation checkPdtBuildWithHttpInfo
     *
     * Check status of a PDT materialization
     *
     * @param  string $materialization_id The materialization id to check status for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MaterializePDT, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkPdtBuildWithHttpInfo($materialization_id)
    {
        $returnType = '\Swagger\Client\Model\MaterializePDT';
        $request = $this->checkPdtBuildRequest($materialization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MaterializePDT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkPdtBuildAsync
     *
     * Check status of a PDT materialization
     *
     * @param  string $materialization_id The materialization id to check status for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkPdtBuildAsync($materialization_id)
    {
        return $this->checkPdtBuildAsyncWithHttpInfo($materialization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkPdtBuildAsyncWithHttpInfo
     *
     * Check status of a PDT materialization
     *
     * @param  string $materialization_id The materialization id to check status for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkPdtBuildAsyncWithHttpInfo($materialization_id)
    {
        $returnType = '\Swagger\Client\Model\MaterializePDT';
        $request = $this->checkPdtBuildRequest($materialization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkPdtBuild'
     *
     * @param  string $materialization_id The materialization id to check status for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkPdtBuildRequest($materialization_id)
    {
        // verify the required parameter 'materialization_id' is set
        if ($materialization_id === null || (is_array($materialization_id) && count($materialization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $materialization_id when calling checkPdtBuild'
            );
        }

        $resourcePath = '/derived_table/{materialization_id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($materialization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'materialization_id' . '}',
                ObjectSerializer::toPathValue($materialization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation graphDerivedTablesForModel
     *
     * Get Derived Table graph for model
     *
     * @param  string $model The name of the Lookml model. (required)
     * @param  string $format The format of the graph. Valid values are [dot]. Default is &#x60;dot&#x60; (optional)
     * @param  string $color Color denoting the build status of the graph. Grey &#x3D; not built, green &#x3D; built, yellow &#x3D; building, red &#x3D; error. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DependencyGraph
     */
    public function graphDerivedTablesForModel($model, $format = null, $color = null)
    {
        list($response) = $this->graphDerivedTablesForModelWithHttpInfo($model, $format, $color);
        return $response;
    }

    /**
     * Operation graphDerivedTablesForModelWithHttpInfo
     *
     * Get Derived Table graph for model
     *
     * @param  string $model The name of the Lookml model. (required)
     * @param  string $format The format of the graph. Valid values are [dot]. Default is &#x60;dot&#x60; (optional)
     * @param  string $color Color denoting the build status of the graph. Grey &#x3D; not built, green &#x3D; built, yellow &#x3D; building, red &#x3D; error. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DependencyGraph, HTTP status code, HTTP response headers (array of strings)
     */
    public function graphDerivedTablesForModelWithHttpInfo($model, $format = null, $color = null)
    {
        $returnType = '\Swagger\Client\Model\DependencyGraph';
        $request = $this->graphDerivedTablesForModelRequest($model, $format, $color);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DependencyGraph',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation graphDerivedTablesForModelAsync
     *
     * Get Derived Table graph for model
     *
     * @param  string $model The name of the Lookml model. (required)
     * @param  string $format The format of the graph. Valid values are [dot]. Default is &#x60;dot&#x60; (optional)
     * @param  string $color Color denoting the build status of the graph. Grey &#x3D; not built, green &#x3D; built, yellow &#x3D; building, red &#x3D; error. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function graphDerivedTablesForModelAsync($model, $format = null, $color = null)
    {
        return $this->graphDerivedTablesForModelAsyncWithHttpInfo($model, $format, $color)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation graphDerivedTablesForModelAsyncWithHttpInfo
     *
     * Get Derived Table graph for model
     *
     * @param  string $model The name of the Lookml model. (required)
     * @param  string $format The format of the graph. Valid values are [dot]. Default is &#x60;dot&#x60; (optional)
     * @param  string $color Color denoting the build status of the graph. Grey &#x3D; not built, green &#x3D; built, yellow &#x3D; building, red &#x3D; error. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function graphDerivedTablesForModelAsyncWithHttpInfo($model, $format = null, $color = null)
    {
        $returnType = '\Swagger\Client\Model\DependencyGraph';
        $request = $this->graphDerivedTablesForModelRequest($model, $format, $color);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'graphDerivedTablesForModel'
     *
     * @param  string $model The name of the Lookml model. (required)
     * @param  string $format The format of the graph. Valid values are [dot]. Default is &#x60;dot&#x60; (optional)
     * @param  string $color Color denoting the build status of the graph. Grey &#x3D; not built, green &#x3D; built, yellow &#x3D; building, red &#x3D; error. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function graphDerivedTablesForModelRequest($model, $format = null, $color = null)
    {
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling graphDerivedTablesForModel'
            );
        }

        $resourcePath = '/derived_table/graph/model/{model}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($color !== null) {
            $queryParams['color'] = ObjectSerializer::toQueryValue($color);
        }

        // path params
        if ($model !== null) {
            $resourcePath = str_replace(
                '{' . 'model' . '}',
                ObjectSerializer::toPathValue($model),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation graphDerivedTablesForView
     *
     * Get subgraph of derived table and dependencies
     *
     * @param  string $view The derived table&#39;s view name. (required)
     * @param  string $models The models where this derived table is defined. (optional)
     * @param  string $workspace The model directory to look in, either &#x60;dev&#x60; or &#x60;production&#x60;. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DependencyGraph
     */
    public function graphDerivedTablesForView($view, $models = null, $workspace = null)
    {
        list($response) = $this->graphDerivedTablesForViewWithHttpInfo($view, $models, $workspace);
        return $response;
    }

    /**
     * Operation graphDerivedTablesForViewWithHttpInfo
     *
     * Get subgraph of derived table and dependencies
     *
     * @param  string $view The derived table&#39;s view name. (required)
     * @param  string $models The models where this derived table is defined. (optional)
     * @param  string $workspace The model directory to look in, either &#x60;dev&#x60; or &#x60;production&#x60;. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DependencyGraph, HTTP status code, HTTP response headers (array of strings)
     */
    public function graphDerivedTablesForViewWithHttpInfo($view, $models = null, $workspace = null)
    {
        $returnType = '\Swagger\Client\Model\DependencyGraph';
        $request = $this->graphDerivedTablesForViewRequest($view, $models, $workspace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DependencyGraph',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation graphDerivedTablesForViewAsync
     *
     * Get subgraph of derived table and dependencies
     *
     * @param  string $view The derived table&#39;s view name. (required)
     * @param  string $models The models where this derived table is defined. (optional)
     * @param  string $workspace The model directory to look in, either &#x60;dev&#x60; or &#x60;production&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function graphDerivedTablesForViewAsync($view, $models = null, $workspace = null)
    {
        return $this->graphDerivedTablesForViewAsyncWithHttpInfo($view, $models, $workspace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation graphDerivedTablesForViewAsyncWithHttpInfo
     *
     * Get subgraph of derived table and dependencies
     *
     * @param  string $view The derived table&#39;s view name. (required)
     * @param  string $models The models where this derived table is defined. (optional)
     * @param  string $workspace The model directory to look in, either &#x60;dev&#x60; or &#x60;production&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function graphDerivedTablesForViewAsyncWithHttpInfo($view, $models = null, $workspace = null)
    {
        $returnType = '\Swagger\Client\Model\DependencyGraph';
        $request = $this->graphDerivedTablesForViewRequest($view, $models, $workspace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'graphDerivedTablesForView'
     *
     * @param  string $view The derived table&#39;s view name. (required)
     * @param  string $models The models where this derived table is defined. (optional)
     * @param  string $workspace The model directory to look in, either &#x60;dev&#x60; or &#x60;production&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function graphDerivedTablesForViewRequest($view, $models = null, $workspace = null)
    {
        // verify the required parameter 'view' is set
        if ($view === null || (is_array($view) && count($view) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view when calling graphDerivedTablesForView'
            );
        }

        $resourcePath = '/derived_table/graph/view/{view}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($models !== null) {
            $queryParams['models'] = ObjectSerializer::toQueryValue($models);
        }
        // query params
        if ($workspace !== null) {
            $queryParams['workspace'] = ObjectSerializer::toQueryValue($workspace);
        }

        // path params
        if ($view !== null) {
            $resourcePath = str_replace(
                '{' . 'view' . '}',
                ObjectSerializer::toPathValue($view),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startPdtBuild
     *
     * Start a PDT materialization
     *
     * @param  string $model_name The model of the PDT to start building. (required)
     * @param  string $view_name The view name of the PDT to start building. (required)
     * @param  string $force_rebuild Force rebuild of required dependent PDTs, even if they are already materialized. (optional)
     * @param  string $force_full_incremental Force involved incremental PDTs to fully re-materialize. (optional)
     * @param  string $workspace Workspace in which to materialize selected PDT (&#39;dev&#39; or default &#39;production&#39;). (optional)
     * @param  string $source The source of this request. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MaterializePDT
     */
    public function startPdtBuild($model_name, $view_name, $force_rebuild = null, $force_full_incremental = null, $workspace = null, $source = null)
    {
        list($response) = $this->startPdtBuildWithHttpInfo($model_name, $view_name, $force_rebuild, $force_full_incremental, $workspace, $source);
        return $response;
    }

    /**
     * Operation startPdtBuildWithHttpInfo
     *
     * Start a PDT materialization
     *
     * @param  string $model_name The model of the PDT to start building. (required)
     * @param  string $view_name The view name of the PDT to start building. (required)
     * @param  string $force_rebuild Force rebuild of required dependent PDTs, even if they are already materialized. (optional)
     * @param  string $force_full_incremental Force involved incremental PDTs to fully re-materialize. (optional)
     * @param  string $workspace Workspace in which to materialize selected PDT (&#39;dev&#39; or default &#39;production&#39;). (optional)
     * @param  string $source The source of this request. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MaterializePDT, HTTP status code, HTTP response headers (array of strings)
     */
    public function startPdtBuildWithHttpInfo($model_name, $view_name, $force_rebuild = null, $force_full_incremental = null, $workspace = null, $source = null)
    {
        $returnType = '\Swagger\Client\Model\MaterializePDT';
        $request = $this->startPdtBuildRequest($model_name, $view_name, $force_rebuild, $force_full_incremental, $workspace, $source);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MaterializePDT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startPdtBuildAsync
     *
     * Start a PDT materialization
     *
     * @param  string $model_name The model of the PDT to start building. (required)
     * @param  string $view_name The view name of the PDT to start building. (required)
     * @param  string $force_rebuild Force rebuild of required dependent PDTs, even if they are already materialized. (optional)
     * @param  string $force_full_incremental Force involved incremental PDTs to fully re-materialize. (optional)
     * @param  string $workspace Workspace in which to materialize selected PDT (&#39;dev&#39; or default &#39;production&#39;). (optional)
     * @param  string $source The source of this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startPdtBuildAsync($model_name, $view_name, $force_rebuild = null, $force_full_incremental = null, $workspace = null, $source = null)
    {
        return $this->startPdtBuildAsyncWithHttpInfo($model_name, $view_name, $force_rebuild, $force_full_incremental, $workspace, $source)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startPdtBuildAsyncWithHttpInfo
     *
     * Start a PDT materialization
     *
     * @param  string $model_name The model of the PDT to start building. (required)
     * @param  string $view_name The view name of the PDT to start building. (required)
     * @param  string $force_rebuild Force rebuild of required dependent PDTs, even if they are already materialized. (optional)
     * @param  string $force_full_incremental Force involved incremental PDTs to fully re-materialize. (optional)
     * @param  string $workspace Workspace in which to materialize selected PDT (&#39;dev&#39; or default &#39;production&#39;). (optional)
     * @param  string $source The source of this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startPdtBuildAsyncWithHttpInfo($model_name, $view_name, $force_rebuild = null, $force_full_incremental = null, $workspace = null, $source = null)
    {
        $returnType = '\Swagger\Client\Model\MaterializePDT';
        $request = $this->startPdtBuildRequest($model_name, $view_name, $force_rebuild, $force_full_incremental, $workspace, $source);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startPdtBuild'
     *
     * @param  string $model_name The model of the PDT to start building. (required)
     * @param  string $view_name The view name of the PDT to start building. (required)
     * @param  string $force_rebuild Force rebuild of required dependent PDTs, even if they are already materialized. (optional)
     * @param  string $force_full_incremental Force involved incremental PDTs to fully re-materialize. (optional)
     * @param  string $workspace Workspace in which to materialize selected PDT (&#39;dev&#39; or default &#39;production&#39;). (optional)
     * @param  string $source The source of this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startPdtBuildRequest($model_name, $view_name, $force_rebuild = null, $force_full_incremental = null, $workspace = null, $source = null)
    {
        // verify the required parameter 'model_name' is set
        if ($model_name === null || (is_array($model_name) && count($model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_name when calling startPdtBuild'
            );
        }
        // verify the required parameter 'view_name' is set
        if ($view_name === null || (is_array($view_name) && count($view_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view_name when calling startPdtBuild'
            );
        }

        $resourcePath = '/derived_table/{model_name}/{view_name}/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($force_rebuild !== null) {
            $queryParams['force_rebuild'] = ObjectSerializer::toQueryValue($force_rebuild);
        }
        // query params
        if ($force_full_incremental !== null) {
            $queryParams['force_full_incremental'] = ObjectSerializer::toQueryValue($force_full_incremental);
        }
        // query params
        if ($workspace !== null) {
            $queryParams['workspace'] = ObjectSerializer::toQueryValue($workspace);
        }
        // query params
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source);
        }

        // path params
        if ($model_name !== null) {
            $resourcePath = str_replace(
                '{' . 'model_name' . '}',
                ObjectSerializer::toPathValue($model_name),
                $resourcePath
            );
        }
        // path params
        if ($view_name !== null) {
            $resourcePath = str_replace(
                '{' . 'view_name' . '}',
                ObjectSerializer::toPathValue($view_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopPdtBuild
     *
     * Stop a PDT materialization
     *
     * @param  string $materialization_id The materialization id to stop. (required)
     * @param  string $source The source of this request. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MaterializePDT
     */
    public function stopPdtBuild($materialization_id, $source = null)
    {
        list($response) = $this->stopPdtBuildWithHttpInfo($materialization_id, $source);
        return $response;
    }

    /**
     * Operation stopPdtBuildWithHttpInfo
     *
     * Stop a PDT materialization
     *
     * @param  string $materialization_id The materialization id to stop. (required)
     * @param  string $source The source of this request. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MaterializePDT, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPdtBuildWithHttpInfo($materialization_id, $source = null)
    {
        $returnType = '\Swagger\Client\Model\MaterializePDT';
        $request = $this->stopPdtBuildRequest($materialization_id, $source);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MaterializePDT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stopPdtBuildAsync
     *
     * Stop a PDT materialization
     *
     * @param  string $materialization_id The materialization id to stop. (required)
     * @param  string $source The source of this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopPdtBuildAsync($materialization_id, $source = null)
    {
        return $this->stopPdtBuildAsyncWithHttpInfo($materialization_id, $source)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stopPdtBuildAsyncWithHttpInfo
     *
     * Stop a PDT materialization
     *
     * @param  string $materialization_id The materialization id to stop. (required)
     * @param  string $source The source of this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopPdtBuildAsyncWithHttpInfo($materialization_id, $source = null)
    {
        $returnType = '\Swagger\Client\Model\MaterializePDT';
        $request = $this->stopPdtBuildRequest($materialization_id, $source);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopPdtBuild'
     *
     * @param  string $materialization_id The materialization id to stop. (required)
     * @param  string $source The source of this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stopPdtBuildRequest($materialization_id, $source = null)
    {
        // verify the required parameter 'materialization_id' is set
        if ($materialization_id === null || (is_array($materialization_id) && count($materialization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $materialization_id when calling stopPdtBuild'
            );
        }

        $resourcePath = '/derived_table/{materialization_id}/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source);
        }

        // path params
        if ($materialization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'materialization_id' . '}',
                ObjectSerializer::toPathValue($materialization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
