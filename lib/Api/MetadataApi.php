<?php
/**
 * MetadataApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.1 is deprecated.  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced to make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to the previous API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 4.0.23.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * MetadataApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetadataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation connectionColumns
     *
     * Get columns for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database For dialects that support multiple databases, optionally identify which to use (optional)
     * @param  string $schema_name Name of schema to use. (optional)
     * @param  bool $cache True to fetch from cache, false to load fresh (optional)
     * @param  int $table_limit limits the tables per schema returned (optional)
     * @param  string $table_names only fetch columns for a given (comma-separated) list of tables (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SchemaColumns[]
     */
    public function connectionColumns($connection_name, $database = null, $schema_name = null, $cache = null, $table_limit = null, $table_names = null, $fields = null)
    {
        list($response) = $this->connectionColumnsWithHttpInfo($connection_name, $database, $schema_name, $cache, $table_limit, $table_names, $fields);
        return $response;
    }

    /**
     * Operation connectionColumnsWithHttpInfo
     *
     * Get columns for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database For dialects that support multiple databases, optionally identify which to use (optional)
     * @param  string $schema_name Name of schema to use. (optional)
     * @param  bool $cache True to fetch from cache, false to load fresh (optional)
     * @param  int $table_limit limits the tables per schema returned (optional)
     * @param  string $table_names only fetch columns for a given (comma-separated) list of tables (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SchemaColumns[], HTTP status code, HTTP response headers (array of strings)
     */
    public function connectionColumnsWithHttpInfo($connection_name, $database = null, $schema_name = null, $cache = null, $table_limit = null, $table_names = null, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\SchemaColumns[]';
        $request = $this->connectionColumnsRequest($connection_name, $database, $schema_name, $cache, $table_limit, $table_names, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SchemaColumns[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation connectionColumnsAsync
     *
     * Get columns for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database For dialects that support multiple databases, optionally identify which to use (optional)
     * @param  string $schema_name Name of schema to use. (optional)
     * @param  bool $cache True to fetch from cache, false to load fresh (optional)
     * @param  int $table_limit limits the tables per schema returned (optional)
     * @param  string $table_names only fetch columns for a given (comma-separated) list of tables (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionColumnsAsync($connection_name, $database = null, $schema_name = null, $cache = null, $table_limit = null, $table_names = null, $fields = null)
    {
        return $this->connectionColumnsAsyncWithHttpInfo($connection_name, $database, $schema_name, $cache, $table_limit, $table_names, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation connectionColumnsAsyncWithHttpInfo
     *
     * Get columns for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database For dialects that support multiple databases, optionally identify which to use (optional)
     * @param  string $schema_name Name of schema to use. (optional)
     * @param  bool $cache True to fetch from cache, false to load fresh (optional)
     * @param  int $table_limit limits the tables per schema returned (optional)
     * @param  string $table_names only fetch columns for a given (comma-separated) list of tables (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionColumnsAsyncWithHttpInfo($connection_name, $database = null, $schema_name = null, $cache = null, $table_limit = null, $table_names = null, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\SchemaColumns[]';
        $request = $this->connectionColumnsRequest($connection_name, $database, $schema_name, $cache, $table_limit, $table_names, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'connectionColumns'
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database For dialects that support multiple databases, optionally identify which to use (optional)
     * @param  string $schema_name Name of schema to use. (optional)
     * @param  bool $cache True to fetch from cache, false to load fresh (optional)
     * @param  int $table_limit limits the tables per schema returned (optional)
     * @param  string $table_names only fetch columns for a given (comma-separated) list of tables (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function connectionColumnsRequest($connection_name, $database = null, $schema_name = null, $cache = null, $table_limit = null, $table_names = null, $fields = null)
    {
        // verify the required parameter 'connection_name' is set
        if ($connection_name === null || (is_array($connection_name) && count($connection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_name when calling connectionColumns'
            );
        }

        $resourcePath = '/connections/{connection_name}/columns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($database !== null) {
            $queryParams['database'] = ObjectSerializer::toQueryValue($database);
        }
        // query params
        if ($schema_name !== null) {
            $queryParams['schema_name'] = ObjectSerializer::toQueryValue($schema_name);
        }
        // query params
        if ($cache !== null) {
            $queryParams['cache'] = ObjectSerializer::toQueryValue($cache);
        }
        // query params
        if ($table_limit !== null) {
            $queryParams['table_limit'] = ObjectSerializer::toQueryValue($table_limit);
        }
        // query params
        if ($table_names !== null) {
            $queryParams['table_names'] = ObjectSerializer::toQueryValue($table_names);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($connection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_name' . '}',
                ObjectSerializer::toPathValue($connection_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation connectionCostEstimate
     *
     * Estimate costs for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  \Swagger\Client\Model\CreateCostEstimate $body SQL statement to estimate (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CostEstimate
     */
    public function connectionCostEstimate($connection_name, $body, $fields = null)
    {
        list($response) = $this->connectionCostEstimateWithHttpInfo($connection_name, $body, $fields);
        return $response;
    }

    /**
     * Operation connectionCostEstimateWithHttpInfo
     *
     * Estimate costs for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  \Swagger\Client\Model\CreateCostEstimate $body SQL statement to estimate (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CostEstimate, HTTP status code, HTTP response headers (array of strings)
     */
    public function connectionCostEstimateWithHttpInfo($connection_name, $body, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\CostEstimate';
        $request = $this->connectionCostEstimateRequest($connection_name, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CostEstimate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation connectionCostEstimateAsync
     *
     * Estimate costs for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  \Swagger\Client\Model\CreateCostEstimate $body SQL statement to estimate (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionCostEstimateAsync($connection_name, $body, $fields = null)
    {
        return $this->connectionCostEstimateAsyncWithHttpInfo($connection_name, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation connectionCostEstimateAsyncWithHttpInfo
     *
     * Estimate costs for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  \Swagger\Client\Model\CreateCostEstimate $body SQL statement to estimate (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionCostEstimateAsyncWithHttpInfo($connection_name, $body, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\CostEstimate';
        $request = $this->connectionCostEstimateRequest($connection_name, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'connectionCostEstimate'
     *
     * @param  string $connection_name Name of connection (required)
     * @param  \Swagger\Client\Model\CreateCostEstimate $body SQL statement to estimate (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function connectionCostEstimateRequest($connection_name, $body, $fields = null)
    {
        // verify the required parameter 'connection_name' is set
        if ($connection_name === null || (is_array($connection_name) && count($connection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_name when calling connectionCostEstimate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling connectionCostEstimate'
            );
        }

        $resourcePath = '/connections/{connection_name}/cost_estimate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($connection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_name' . '}',
                ObjectSerializer::toPathValue($connection_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation connectionDatabases
     *
     * List accessible databases to this connection
     *
     * @param  string $connection_name Name of connection (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function connectionDatabases($connection_name)
    {
        list($response) = $this->connectionDatabasesWithHttpInfo($connection_name);
        return $response;
    }

    /**
     * Operation connectionDatabasesWithHttpInfo
     *
     * List accessible databases to this connection
     *
     * @param  string $connection_name Name of connection (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function connectionDatabasesWithHttpInfo($connection_name)
    {
        $returnType = 'string[]';
        $request = $this->connectionDatabasesRequest($connection_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation connectionDatabasesAsync
     *
     * List accessible databases to this connection
     *
     * @param  string $connection_name Name of connection (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionDatabasesAsync($connection_name)
    {
        return $this->connectionDatabasesAsyncWithHttpInfo($connection_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation connectionDatabasesAsyncWithHttpInfo
     *
     * List accessible databases to this connection
     *
     * @param  string $connection_name Name of connection (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionDatabasesAsyncWithHttpInfo($connection_name)
    {
        $returnType = 'string[]';
        $request = $this->connectionDatabasesRequest($connection_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'connectionDatabases'
     *
     * @param  string $connection_name Name of connection (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function connectionDatabasesRequest($connection_name)
    {
        // verify the required parameter 'connection_name' is set
        if ($connection_name === null || (is_array($connection_name) && count($connection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_name when calling connectionDatabases'
            );
        }

        $resourcePath = '/connections/{connection_name}/databases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($connection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_name' . '}',
                ObjectSerializer::toPathValue($connection_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation connectionFeatures
     *
     * Metadata features supported by this connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectionFeatures
     */
    public function connectionFeatures($connection_name, $fields = null)
    {
        list($response) = $this->connectionFeaturesWithHttpInfo($connection_name, $fields);
        return $response;
    }

    /**
     * Operation connectionFeaturesWithHttpInfo
     *
     * Metadata features supported by this connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectionFeatures, HTTP status code, HTTP response headers (array of strings)
     */
    public function connectionFeaturesWithHttpInfo($connection_name, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectionFeatures';
        $request = $this->connectionFeaturesRequest($connection_name, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectionFeatures',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation connectionFeaturesAsync
     *
     * Metadata features supported by this connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionFeaturesAsync($connection_name, $fields = null)
    {
        return $this->connectionFeaturesAsyncWithHttpInfo($connection_name, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation connectionFeaturesAsyncWithHttpInfo
     *
     * Metadata features supported by this connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionFeaturesAsyncWithHttpInfo($connection_name, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectionFeatures';
        $request = $this->connectionFeaturesRequest($connection_name, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'connectionFeatures'
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function connectionFeaturesRequest($connection_name, $fields = null)
    {
        // verify the required parameter 'connection_name' is set
        if ($connection_name === null || (is_array($connection_name) && count($connection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_name when calling connectionFeatures'
            );
        }

        $resourcePath = '/connections/{connection_name}/features';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($connection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_name' . '}',
                ObjectSerializer::toPathValue($connection_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation connectionSchemas
     *
     * Get schemas for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database For dialects that support multiple databases, optionally identify which to use (optional)
     * @param  bool $cache True to use fetch from cache, false to load fresh (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Schema[]
     */
    public function connectionSchemas($connection_name, $database = null, $cache = null, $fields = null)
    {
        list($response) = $this->connectionSchemasWithHttpInfo($connection_name, $database, $cache, $fields);
        return $response;
    }

    /**
     * Operation connectionSchemasWithHttpInfo
     *
     * Get schemas for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database For dialects that support multiple databases, optionally identify which to use (optional)
     * @param  bool $cache True to use fetch from cache, false to load fresh (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Schema[], HTTP status code, HTTP response headers (array of strings)
     */
    public function connectionSchemasWithHttpInfo($connection_name, $database = null, $cache = null, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\Schema[]';
        $request = $this->connectionSchemasRequest($connection_name, $database, $cache, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Schema[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation connectionSchemasAsync
     *
     * Get schemas for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database For dialects that support multiple databases, optionally identify which to use (optional)
     * @param  bool $cache True to use fetch from cache, false to load fresh (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionSchemasAsync($connection_name, $database = null, $cache = null, $fields = null)
    {
        return $this->connectionSchemasAsyncWithHttpInfo($connection_name, $database, $cache, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation connectionSchemasAsyncWithHttpInfo
     *
     * Get schemas for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database For dialects that support multiple databases, optionally identify which to use (optional)
     * @param  bool $cache True to use fetch from cache, false to load fresh (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionSchemasAsyncWithHttpInfo($connection_name, $database = null, $cache = null, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\Schema[]';
        $request = $this->connectionSchemasRequest($connection_name, $database, $cache, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'connectionSchemas'
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database For dialects that support multiple databases, optionally identify which to use (optional)
     * @param  bool $cache True to use fetch from cache, false to load fresh (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function connectionSchemasRequest($connection_name, $database = null, $cache = null, $fields = null)
    {
        // verify the required parameter 'connection_name' is set
        if ($connection_name === null || (is_array($connection_name) && count($connection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_name when calling connectionSchemas'
            );
        }

        $resourcePath = '/connections/{connection_name}/schemas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($database !== null) {
            $queryParams['database'] = ObjectSerializer::toQueryValue($database);
        }
        // query params
        if ($cache !== null) {
            $queryParams['cache'] = ObjectSerializer::toQueryValue($cache);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($connection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_name' . '}',
                ObjectSerializer::toPathValue($connection_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation connectionSearchColumns
     *
     * Search a connection for columns
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $column_name Column name to find (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ColumnSearch[]
     */
    public function connectionSearchColumns($connection_name, $column_name = null, $fields = null)
    {
        list($response) = $this->connectionSearchColumnsWithHttpInfo($connection_name, $column_name, $fields);
        return $response;
    }

    /**
     * Operation connectionSearchColumnsWithHttpInfo
     *
     * Search a connection for columns
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $column_name Column name to find (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ColumnSearch[], HTTP status code, HTTP response headers (array of strings)
     */
    public function connectionSearchColumnsWithHttpInfo($connection_name, $column_name = null, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\ColumnSearch[]';
        $request = $this->connectionSearchColumnsRequest($connection_name, $column_name, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ColumnSearch[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation connectionSearchColumnsAsync
     *
     * Search a connection for columns
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $column_name Column name to find (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionSearchColumnsAsync($connection_name, $column_name = null, $fields = null)
    {
        return $this->connectionSearchColumnsAsyncWithHttpInfo($connection_name, $column_name, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation connectionSearchColumnsAsyncWithHttpInfo
     *
     * Search a connection for columns
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $column_name Column name to find (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionSearchColumnsAsyncWithHttpInfo($connection_name, $column_name = null, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\ColumnSearch[]';
        $request = $this->connectionSearchColumnsRequest($connection_name, $column_name, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'connectionSearchColumns'
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $column_name Column name to find (optional)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function connectionSearchColumnsRequest($connection_name, $column_name = null, $fields = null)
    {
        // verify the required parameter 'connection_name' is set
        if ($connection_name === null || (is_array($connection_name) && count($connection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_name when calling connectionSearchColumns'
            );
        }

        $resourcePath = '/connections/{connection_name}/search_columns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($column_name !== null) {
            $queryParams['column_name'] = ObjectSerializer::toQueryValue($column_name);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($connection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_name' . '}',
                ObjectSerializer::toPathValue($connection_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation connectionTables
     *
     * Get tables for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database Optional. Name of database to use for the query, only if applicable (optional)
     * @param  string $schema_name Optional. Return only tables for this schema (optional)
     * @param  bool $cache True to fetch from cache, false to load fresh (optional)
     * @param  string $fields Requested fields. (optional)
     * @param  string $table_filter Optional. Return tables with names that contain this value (optional)
     * @param  int $table_limit Optional. Return tables up to the table_limit (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SchemaTables[]
     */
    public function connectionTables($connection_name, $database = null, $schema_name = null, $cache = null, $fields = null, $table_filter = null, $table_limit = null)
    {
        list($response) = $this->connectionTablesWithHttpInfo($connection_name, $database, $schema_name, $cache, $fields, $table_filter, $table_limit);
        return $response;
    }

    /**
     * Operation connectionTablesWithHttpInfo
     *
     * Get tables for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database Optional. Name of database to use for the query, only if applicable (optional)
     * @param  string $schema_name Optional. Return only tables for this schema (optional)
     * @param  bool $cache True to fetch from cache, false to load fresh (optional)
     * @param  string $fields Requested fields. (optional)
     * @param  string $table_filter Optional. Return tables with names that contain this value (optional)
     * @param  int $table_limit Optional. Return tables up to the table_limit (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SchemaTables[], HTTP status code, HTTP response headers (array of strings)
     */
    public function connectionTablesWithHttpInfo($connection_name, $database = null, $schema_name = null, $cache = null, $fields = null, $table_filter = null, $table_limit = null)
    {
        $returnType = '\Swagger\Client\Model\SchemaTables[]';
        $request = $this->connectionTablesRequest($connection_name, $database, $schema_name, $cache, $fields, $table_filter, $table_limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SchemaTables[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation connectionTablesAsync
     *
     * Get tables for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database Optional. Name of database to use for the query, only if applicable (optional)
     * @param  string $schema_name Optional. Return only tables for this schema (optional)
     * @param  bool $cache True to fetch from cache, false to load fresh (optional)
     * @param  string $fields Requested fields. (optional)
     * @param  string $table_filter Optional. Return tables with names that contain this value (optional)
     * @param  int $table_limit Optional. Return tables up to the table_limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionTablesAsync($connection_name, $database = null, $schema_name = null, $cache = null, $fields = null, $table_filter = null, $table_limit = null)
    {
        return $this->connectionTablesAsyncWithHttpInfo($connection_name, $database, $schema_name, $cache, $fields, $table_filter, $table_limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation connectionTablesAsyncWithHttpInfo
     *
     * Get tables for a connection
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database Optional. Name of database to use for the query, only if applicable (optional)
     * @param  string $schema_name Optional. Return only tables for this schema (optional)
     * @param  bool $cache True to fetch from cache, false to load fresh (optional)
     * @param  string $fields Requested fields. (optional)
     * @param  string $table_filter Optional. Return tables with names that contain this value (optional)
     * @param  int $table_limit Optional. Return tables up to the table_limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectionTablesAsyncWithHttpInfo($connection_name, $database = null, $schema_name = null, $cache = null, $fields = null, $table_filter = null, $table_limit = null)
    {
        $returnType = '\Swagger\Client\Model\SchemaTables[]';
        $request = $this->connectionTablesRequest($connection_name, $database, $schema_name, $cache, $fields, $table_filter, $table_limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'connectionTables'
     *
     * @param  string $connection_name Name of connection (required)
     * @param  string $database Optional. Name of database to use for the query, only if applicable (optional)
     * @param  string $schema_name Optional. Return only tables for this schema (optional)
     * @param  bool $cache True to fetch from cache, false to load fresh (optional)
     * @param  string $fields Requested fields. (optional)
     * @param  string $table_filter Optional. Return tables with names that contain this value (optional)
     * @param  int $table_limit Optional. Return tables up to the table_limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function connectionTablesRequest($connection_name, $database = null, $schema_name = null, $cache = null, $fields = null, $table_filter = null, $table_limit = null)
    {
        // verify the required parameter 'connection_name' is set
        if ($connection_name === null || (is_array($connection_name) && count($connection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_name when calling connectionTables'
            );
        }

        $resourcePath = '/connections/{connection_name}/tables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($database !== null) {
            $queryParams['database'] = ObjectSerializer::toQueryValue($database);
        }
        // query params
        if ($schema_name !== null) {
            $queryParams['schema_name'] = ObjectSerializer::toQueryValue($schema_name);
        }
        // query params
        if ($cache !== null) {
            $queryParams['cache'] = ObjectSerializer::toQueryValue($cache);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($table_filter !== null) {
            $queryParams['table_filter'] = ObjectSerializer::toQueryValue($table_filter);
        }
        // query params
        if ($table_limit !== null) {
            $queryParams['table_limit'] = ObjectSerializer::toQueryValue($table_limit);
        }

        // path params
        if ($connection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_name' . '}',
                ObjectSerializer::toPathValue($connection_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModel
     *
     * Get a single model
     *
     * @param  string $model_name Name of model (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Model
     */
    public function getModel($model_name)
    {
        list($response) = $this->getModelWithHttpInfo($model_name);
        return $response;
    }

    /**
     * Operation getModelWithHttpInfo
     *
     * Get a single model
     *
     * @param  string $model_name Name of model (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Model, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelWithHttpInfo($model_name)
    {
        $returnType = '\Swagger\Client\Model\Model';
        $request = $this->getModelRequest($model_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Model',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelAsync
     *
     * Get a single model
     *
     * @param  string $model_name Name of model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelAsync($model_name)
    {
        return $this->getModelAsyncWithHttpInfo($model_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModelAsyncWithHttpInfo
     *
     * Get a single model
     *
     * @param  string $model_name Name of model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelAsyncWithHttpInfo($model_name)
    {
        $returnType = '\Swagger\Client\Model\Model';
        $request = $this->getModelRequest($model_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModel'
     *
     * @param  string $model_name Name of model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getModelRequest($model_name)
    {
        // verify the required parameter 'model_name' is set
        if ($model_name === null || (is_array($model_name) && count($model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_name when calling getModel'
            );
        }

        $resourcePath = '/models/{model_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($model_name !== null) {
            $resourcePath = str_replace(
                '{' . 'model_name' . '}',
                ObjectSerializer::toPathValue($model_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modelFieldnameSuggestions
     *
     * Model field name suggestions
     *
     * @param  string $model_name Name of model (required)
     * @param  string $view_name Name of view (required)
     * @param  string $field_name Name of field to use for suggestions (required)
     * @param  string $term Search term pattern (evaluated as as &#x60;%term%&#x60;) (optional)
     * @param  map[string,string] $filters Suggestion filters with field name keys and comparison expressions (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelFieldSuggestions
     */
    public function modelFieldnameSuggestions($model_name, $view_name, $field_name, $term = null, $filters = null)
    {
        list($response) = $this->modelFieldnameSuggestionsWithHttpInfo($model_name, $view_name, $field_name, $term, $filters);
        return $response;
    }

    /**
     * Operation modelFieldnameSuggestionsWithHttpInfo
     *
     * Model field name suggestions
     *
     * @param  string $model_name Name of model (required)
     * @param  string $view_name Name of view (required)
     * @param  string $field_name Name of field to use for suggestions (required)
     * @param  string $term Search term pattern (evaluated as as &#x60;%term%&#x60;) (optional)
     * @param  map[string,string] $filters Suggestion filters with field name keys and comparison expressions (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelFieldSuggestions, HTTP status code, HTTP response headers (array of strings)
     */
    public function modelFieldnameSuggestionsWithHttpInfo($model_name, $view_name, $field_name, $term = null, $filters = null)
    {
        $returnType = '\Swagger\Client\Model\ModelFieldSuggestions';
        $request = $this->modelFieldnameSuggestionsRequest($model_name, $view_name, $field_name, $term, $filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelFieldSuggestions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modelFieldnameSuggestionsAsync
     *
     * Model field name suggestions
     *
     * @param  string $model_name Name of model (required)
     * @param  string $view_name Name of view (required)
     * @param  string $field_name Name of field to use for suggestions (required)
     * @param  string $term Search term pattern (evaluated as as &#x60;%term%&#x60;) (optional)
     * @param  map[string,string] $filters Suggestion filters with field name keys and comparison expressions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modelFieldnameSuggestionsAsync($model_name, $view_name, $field_name, $term = null, $filters = null)
    {
        return $this->modelFieldnameSuggestionsAsyncWithHttpInfo($model_name, $view_name, $field_name, $term, $filters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modelFieldnameSuggestionsAsyncWithHttpInfo
     *
     * Model field name suggestions
     *
     * @param  string $model_name Name of model (required)
     * @param  string $view_name Name of view (required)
     * @param  string $field_name Name of field to use for suggestions (required)
     * @param  string $term Search term pattern (evaluated as as &#x60;%term%&#x60;) (optional)
     * @param  map[string,string] $filters Suggestion filters with field name keys and comparison expressions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modelFieldnameSuggestionsAsyncWithHttpInfo($model_name, $view_name, $field_name, $term = null, $filters = null)
    {
        $returnType = '\Swagger\Client\Model\ModelFieldSuggestions';
        $request = $this->modelFieldnameSuggestionsRequest($model_name, $view_name, $field_name, $term, $filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modelFieldnameSuggestions'
     *
     * @param  string $model_name Name of model (required)
     * @param  string $view_name Name of view (required)
     * @param  string $field_name Name of field to use for suggestions (required)
     * @param  string $term Search term pattern (evaluated as as &#x60;%term%&#x60;) (optional)
     * @param  map[string,string] $filters Suggestion filters with field name keys and comparison expressions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modelFieldnameSuggestionsRequest($model_name, $view_name, $field_name, $term = null, $filters = null)
    {
        // verify the required parameter 'model_name' is set
        if ($model_name === null || (is_array($model_name) && count($model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_name when calling modelFieldnameSuggestions'
            );
        }
        // verify the required parameter 'view_name' is set
        if ($view_name === null || (is_array($view_name) && count($view_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view_name when calling modelFieldnameSuggestions'
            );
        }
        // verify the required parameter 'field_name' is set
        if ($field_name === null || (is_array($field_name) && count($field_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_name when calling modelFieldnameSuggestions'
            );
        }

        $resourcePath = '/models/{model_name}/views/{view_name}/fields/{field_name}/suggestions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($term !== null) {
            $queryParams['term'] = ObjectSerializer::toQueryValue($term);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = ObjectSerializer::toQueryValue($filters);
        }

        // path params
        if ($model_name !== null) {
            $resourcePath = str_replace(
                '{' . 'model_name' . '}',
                ObjectSerializer::toPathValue($model_name),
                $resourcePath
            );
        }
        // path params
        if ($view_name !== null) {
            $resourcePath = str_replace(
                '{' . 'view_name' . '}',
                ObjectSerializer::toPathValue($view_name),
                $resourcePath
            );
        }
        // path params
        if ($field_name !== null) {
            $resourcePath = str_replace(
                '{' . 'field_name' . '}',
                ObjectSerializer::toPathValue($field_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
